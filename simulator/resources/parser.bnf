<S> = CARD_RULE / CARD_RULE+
    
CARD_RULE =
    (
        (
            (
                <SPACE>?
                keyword-effect
                <SPACE>?
            )+
            | keyword-effect_dna-digivolve
        )
        /
        (
            (
                (
                    (
                        <SPACE>?
                        (
                              timing
                            | phase
                            | keyword-effect
                        )
                        <SPACE>?
                    )+
                    | keyword-effect_dna-digivolve
                )
                <SPACE>?
            )*
            (
                <SPACE>?
                (
                    instead
                    / (
                        gain_lose
                        | pay-to-play
                        | play
                        | suspend_unsuspend
                        | trash_delete
                        | activate
                        | activate-n-effects
                        | attack
                        | disallow
                        | return
                        | return-to-return
                        | return-to-trash
                        | add
                        | trigger
                        | reveal
                        | look-at
                        | _place_
                        | search
                        | shuffle
                        | li
                        | disable
                        | reduce-play-cost-by
                        | reduce-digivolution-cost-by
                        | digivolve-into
                        | optionally-dna-digivolve
                        | also-treat-as
                        | unaffected-by-effects-of
                        | set-memory-to
                        | set-original-dp-to
                        | switch-attack-to
                    )
                    / target
                )
            )
        )
    )
    <".">?
<SPACE> = #"\s+"
<OPEN_QUOTE> = "“" | '"'
<CLOSE_QUOTE> = "“" | '"'

<PARENTHESES> = <#"[(][^)]*[)]">
optional = ((you | opponent) <SPACE>)? <("may" | "can" | #"(?i)by")> <SPACE "also">?
before =
    (
        (
            <(#"(?i)When" | #"(?i)If") SPACE>
            (target | target-effect)
            <SPACE "would">
            <SPACE "be">?
            (<SPACE> trash-or-return)?
        ) | (
            <#"(?i)The next time" SPACE> target
            <SPACE "would">?
            <SPACE> state
            (<SPACE> duration)?
            <",">
        )
    )

OPERATOR = "+" | "-"
LTE =
    (
          <#"(?i)Up to">
        | <#"or (less|lower|fewer)">
        | <("is" SPACE)? "less than or equal to">
    )
    (<SPACE> equate-with)?
GTE = <#"or (more|higher)"> (<SPACE> equate-with)?
MAX = <"the highest">
ZERO = (<"no"> | <"none">)
no-other = <"no other">
ONE = <"a" | "an" | "the" | "one">
ALL = <#"(?i)all"> <(SPACE "of" (SPACE "the")?)>?
ANY = <#"(?i)any"> <SPACE "number">?
value =
    (
        <(with SPACE)>?
        (
              ALL | ANY | ZERO | ONE | no-other
            | (
                (LTE <SPACE>)?
                OPERATOR?
                (#"[0-9]+" <SPACE "of">? / MAX)
                (<SPACE> (LTE | GTE))?
            )
        )
    ) / value_or / value_memory
<value_memory> =
    (#"[0-9]+" <SPACE "memory">)
    (<SPACE> (LTE | GTE))?
value_or = (value <" or "> value)
equate-with =
    (
        target <SPACE> field
    ) / target
among-them = <"among them">

(* COLORS *)
color = color_or / (red | blue | yellow | green | purple | black | white)
color_or = (color <" or "> color)
red = <#"(?i)red">
blue = <#"(?i)blue">
yellow = <#"(?i)yellow">
green = <#"(?i)green">
purple = <#"(?i)purple">
black = <#"(?i)black">
white = <#"(?i)white">


(* PHASE *)
phase =
    <"[">
    (
          breeding
        | hand
        | once-per-turn
        | twice-per-turn
        | trash_phase
    )
    <"]">
breeding = <"Breeding">
hand = <"Hand">
once-per-turn = <"Once Per Turn">
twice-per-turn = <"Twice Per Turn">
trash_phase = <"Trash">


(* TIMING *)
timing =
    <"[">
    (
          all-turns
        | start-of-opponent-turn
        | end-of-opponent-turn
        | start-of-your-turn
        | end-of-your-turn
        | when-attacking
        | your-turn
        | opponent-turn
        | main
        | counter
        | end-of-all-turns
        | on-play
        | digivolve
        | end-of-attack
        | start-of-your-main-phase
        | start-of-opponent-main-phase
        | security
        | when-digivolving
        | on-deletion
    )
    <"]">

all-turns = <"All Turns">
start-of-opponent-turn = <"Start of Opponent's Turn">
end-of-opponent-turn = <("At End of Opponent's Turn" | "End of Opponent's Turn")>
start-of-your-turn = <"Start of Your Turn">
end-of-your-turn = <"End of Your Turn">
when-attacking = <"When Attacking">
your-turn = <"Your Turn">
opponent-turn = <"Opponent's Turn">
main = <"Main">
counter = <"Counter">
end-of-all-turns = <"End of All Turns">
on-play = <"On Play">
digivolve = <"Digivolve">
end-of-attack = <"End of Attack">
start-of-your-main-phase = <"Start of Your Main Phase">
start-of-opponent-main-phase = <"Start of Opponent's Main Phase">
security = <"Security">
when-digivolving = <"When Digivolving">
on-deletion = <"On Deletion">

timing-effects-on =
    <SPACE? #"(?i)The" SPACE>?
    timing
    <SPACE ("skills" | "effects") SPACE>
    <("on" | "of") SPACE>
    target
    (<SPACE> it-checks)?
it-checks = <"it checks">


(* KEYWORD-EFFECT *)
use = <#"(?i)use"> <SPACE>
keyword-effect =
    (
        use?
        (without <SPACE>)?
        (
              blocker
            | digi-burst
            | draw
            | rush
            | security-attack
            | alliance
            | armor-purge
            | barrier
            | blast-digivolve
            | blitz
            | de-digivolve
            | decoy
            | delay
            | digi-burst
            | digisorption
            | evade
            | fortitude
            | jamming
            | material-save
            | mind-link
            | overflow
            | piercing
            | raid
            | reboot
            | save
            | retaliation
            | recovery
        )
        (<SPACE> target)?
        (<"."? SPACE?>? PARENTHESES)?
    ) / keyword-effect_or
keyword-effect_or =
    keyword-effect <SPACE "or" SPACE> keyword-effect
blocker = <#"[\<＜]"> <#"(?i)Blocker"> <#"[\>＞]"> <" to suspend one of your " card-type>?
digi-burst = <#"[\<＜]"> <#"(?i)Digi\-Burst"> <SPACE>? value <#"[\>＞]">
draw = <#"[\<＜]"> <#"(?i)Draw"> <SPACE>? value <#"[\>＞]">
rush = <#"[\<＜]"> <#"(?i)Rush"> <#"[\>＞]">
security-attack = <#"[\<＜]"> <(#"(?i)S Attack" | #"(?i)Security A\S*")> (<SPACE>? value)? <#"[\>＞]">
alliance = <#"[\<＜]"> <#"(?i)Alliance"> <#"[\>＞]">
armor-purge = <#"[\<＜]"> <#"(?i)Armor Purge"> <#"[\>＞]">
barrier = <#"[\<＜]"> <#"(?i)Barrier"> <#"[\>＞]">
blast-digivolve = <#"[\<＜]"> <#"(?i)Blast Digivolve"> <#"[\>＞]">
blitz = <#"[\<＜]"> <#"(?i)Blitz"> <#"[\>＞]">
de-digivolve = <#"[\<＜]"> <#"(?i)De\-Digivolve"> (<SPACE>? value)? <#"[\>＞]">
decoy = <#"[\<＜]"> <#"(?i)Decoy"> <SPACE>? <"("> (color <"/"> color) <"trait">? <")"> <#"[\>＞]">
delay = <#"[\<＜]"> <#"(?i)Delay"> <#"[\>＞]">
digi-burst = <#"[\<＜]"> <#"(?i)Digi\-Burst"> (<SPACE>? value)? <#"[\>＞]">
digisorption = <#"[\<＜]"> <#"(?i)Digisorption"> (<SPACE>? value)? <#"[\>＞]">
evade = <#"[\<＜]"> <#"(?i)Evade"> <#"[\>＞]">
fortitude = <#"[\<＜]"> <#"(?i)Fortitude"> <#"[\>＞]">
jamming = <#"[\<＜]"> <#"(?i)Jamming"> <#"[\>＞]">
material-save = <#"[\<＜]"> <#"(?i)Material Save"> <SPACE>? value <#"[\>＞]">
mind-link = <#"[\<＜]"> <#"(?i)Mind Link"> <#"[\>＞]">
overflow = <#"[\<＜]"> <#"(?i)Overflow"> <SPACE>? <"("> value <")"> <#"[\>＞]">
piercing = <#"[\<＜]"> <#"(?i)Piercing"> <#"[\>＞]">
raid = <#"[\<＜]"> <#"(?i)Raid"> <#"[\>＞]">
reboot = <#"[\<＜]"> <#"(?i)Reboot"> <#"[\>＞]">
save = <#"[\<＜]"> <#"(?i)Save"> <#"[\>＞]">
retaliation = <#"[\<＜]"> <#"(?i)Retaliation"> <#"[\>＞]">
recovery = <#"[\<＜]"> <#"(?i)Recovery"> (<SPACE>? value)? <SPACE>? <"(Deck)"> <#"[\>＞]">

keyword-effect_dna-digivolve =
    <#"[\<＜]">
    <"DNA Digivolution:" SPACE>
    value
    <SPACE "from" SPACE>
    dna-digivolve-requirement <" + "> dna-digivolve-requirement
    <#"[\>＞]">
    <SPACE "Digivolve unsuspended with the 2 specified Digimon stacked on top of each other.">?
dna-digivolve-requirement = color <SPACE> level


(* GAIN/LOSE *)
gain_lose =
    <then>?
    (
        conditional
        | duration
        | choose
    )?
    (lose | gain | gain-state-by)+
    (<SPACE> conditional)?
    (<SPACE> duration)?
    (<("."? SPACE)>? PARENTHESES)?
lose =
    <#",?( and )?">?
    <SPACE>?
    (target <SPACE>)?
    <(#"(?i)(loses?|decreasing your)") SPACE>
    (
        <" and ">?
        (
              DP
            | keyword-effect
            | memory
            | ((<"the following effect" SPACE> duration <":">? <SPACE>)? <OPEN_QUOTE> CARD_RULE <CLOSE_QUOTE>)
        )
    )+
gain =
    <("," SPACE?)? (SPACE "and" SPACE)?>?
    <SPACE>?
    (target <SPACE>)?
    <"all" SPACE>?
    <(#"(?i)gets?" | #"(?i)give" | #"(?i)gains?") SPACE>
    (target <SPACE>)?
    (
        <("," SPACE?)? (SPACE "and" SPACE)?>?
        (
              DP
            | keyword-effect
            | memory
            | ((<"the following effect" SPACE> duration <":">? <SPACE>)? <OPEN_QUOTE> CARD_RULE <CLOSE_QUOTE>)
        )
    )+
gain-state-by =
    optional
    <SPACE "make" SPACE>
    target
    <SPACE> state
    <SPACE> duration
    <SPACE "by" SPACE>
    return
DP =
    (
          <"whose total" SPACE>
        | (<(with | "dropping to") SPACE>? value <SPACE>)
    )?
    <"DP">
    (<SPACE> sum)?
    (<SPACE> (LTE | GTE))?
sum =
      (<"adds up to "> value)
    | (<"for each of its "> field)
level =
    (<("a" | "is") SPACE>)?
    (<#"[Ll][Vv]\."> | <#"(?i)level\s+">)
    (<SPACE>? <"of">)?
    <SPACE>? value
memory =
    (
        (value <SPACE>)?
        <"memory">
        (<SPACE "by" SPACE> value)?
    ) / value
set-memory-to = conditional <"set" SPACE> target <SPACE "memory to" SPACE> value
set-original-dp-to = <"Change the original DP of" SPACE> target <SPACE "to" SPACE> value <SPACE> duration
play-cost =
    (value <SPACE>)?
    (<((with | "for") SPACE)? "a" SPACE>)?
    (<("play" | "memory") SPACE>)? <#"costs?">
    <SPACE ("of" | "is")>?
    <SPACE> value
reduce-play-cost-by =
    (conditional <SPACE>)?
    (<#"(?i)Reduce"> | <#"(?i)Decrease">)
    <SPACE> (<"its"> / <"the"> / target) <SPACE ("play" | "memory") SPACE "cost" SPACE ("by" SPACE)?>
    (<("of" | "to play") SPACE> target <SPACE "by" SPACE>)?
    value
    (<SPACE> for-each)?
reduce-digivolution-cost-by =
    (duration <SPACE>)?
    (before <SPACE>)?
    (<"reduce"> | <"decrease">)
    (
          <" the memory cost of the digivolution by ">
        | <" the digivolution cost by ">
    )
    value
    (<SPACE> duration)?
    (<"." SPACE> return)?


(* DURATION *)
duration = during-turn | during-phase | end-of-battle

end-of-battle = <"At the "? #"end of( the)? battle" ","?>

(* DURING TURN *)
during-turn =
      current-turn
    | end-of-turn
    | end-of-your-next-turn
    | end-of-opponents-turn
    | end-of-opponents-next-turn
current-turn = ((<#"(?i)For the turn"> <",">?) | <"this turn">)
end-of-turn =
      <#"(?i)At( the)? end of( the)? turn" ","?>
    | <#"(?i)until the end of the turn">
end-of-your-next-turn = <#"(?i)until the end of your next turn">
end-of-opponents-turn = <#"(?i)until the end of (your opponent\'s|their) turn">
end-of-opponents-next-turn = <#"(?i)until the end of (your opponent\'s|their) next turn">

(* DURING PHASE *)
during-phase =
    <#"(?i)during" SPACE>
    (
        your-main-phase
        | your-unsuspend-phase
        | opponents-next-unsuspend-phase
    )
your-main-phase =
    <"your main phase">
your-unsuspend-phase =
    <"your unsuspend phase">
opponents-next-unsuspend-phase =
    (<"its owner's"> | <"their"> | <"your opponent's">)
    <SPACE "next unsuspend phase">


(* PAY TO PLAY *)
pay-to-play =
    (optional <SPACE>)?
    <#"(?i)(Pay)" SPACE> value <SPACE>
    <"to" SPACE> play


(* PLAY *)
play =
    (
        <then SPACE>?
        ((conditional | choose) <",">? <SPACE>)?
        (duration <SPACE>)?
        ((optional | before) <SPACE>)?
    )?
    <"and" SPACE>?
    ((you | opponent | all-players) <SPACE>)?
    <#"(?i)(play(s|ing)?|uses?)" SPACE>
    (target_and-or / target / (<" and ">? target)+ / target_or)
    (<SPACE> among-them)?
    <",">?
    (
        <SPACE>
        (
              <"as another Digimon">
            | zone
            | keyword-effect
        )
    )?
    (
          (<SPACE> without-paying-memory-cost <"." SPACE> token-attributes)
        | (
            <SPACE>
            (
                <" and ">?
                (
                      without-paying-memory-cost
                    | without-meeting-color-requirement
                    | without-battling
                )
            )+
        )
        | (<"," SPACE> conditional <SPACE> reduce-play-cost-by)?
        | (<"," SPACE> (gain_lose | trash_delete | suspend_unsuspend))
    )?
    disallow-on-play-effects-for-played-cards?
disallow-on-play-effects-for-played-cards =
    <". Any [On Play] effects on ">
    <"the ">?
    <#"(?i)Digimon|Tamer">
    <" played with this effect don't activate">
using-effect = <("using" | "by") " an effect">
without-battling = <"without battling">
without-paying-memory-cost = <#"without paying (its|their|the)( memory)? costs?">
without-meeting-color-requirement = <#"without meeting (its|their) color requirements?">


(* TRASH *)
<trash_delete> =
    (
          trash
        | trash-zone
        | trash-to-trash
        | trash-to-reveal
        | trash-to-keyword
        | trash-to-suspend
        | trash-to-unsuspend
        | trash-to-gain_lose
        | trash-to-disallow-trash
        | trash-to-reduce-play-cost
        | trash-to-add-trashed-field-value
        | deletes-in-battle
        | trash-else
    )
<_trash_prelude_> =
    ((<then> | conditional | choose | if-you-do) <",">? <SPACE>?)?
    (before <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)(delete[sd]?|trash(es|ing)?)" SPACE>
trash =
    _trash_prelude_
    (
        (
            (
                target
                / (<" and ">? target)+)
            (<SPACE> choose)?
            (<SPACE> conditional)?
        )
        | (zone | remaining_cards)
        | <"them">
    )
    (<SPACE> end-the-attack)?
    (<" and ">? trash_delete)?
    (<"." SPACE> for-each)?
    trash-those-digivolution-cards?
trash-those-digivolution-cards =
    <"." SPACE "Trash all of the digivolution cards of" SPACE>
    (<"that"> | <"those"> | <"the">)
    <SPACE "Digimon">
    <SPACE "you returned with this effect">?
trash-to-trash = _trash_prelude_ target <SPACE "to" SPACE> trash_delete
trash-to-reveal = _trash_prelude_ target <SPACE "to" SPACE> reveal
trash-to-keyword = _trash_prelude_ target <"," SPACE> keyword-effect
trash-to-suspend =
    _trash_prelude_
    target
    (
          <SPACE "to">
        | <"." SPACE then>
    )
    <SPACE>
    suspend
trash-to-unsuspend = _trash_prelude_ target <SPACE "to" SPACE> unsuspend
trash-to-gain_lose = _trash_prelude_ target <SPACE "to" SPACE ("have" SPACE)?> gain_lose
trash-to-disallow-trash =
    _trash_prelude_
    (target <SPACE>)?
    <in-battle "," SPACE>
    trash
    <SPACE "to" SPACE "prevent" SPACE>
    target
    <SPACE "from being deleted">
trash-to-reduce-play-cost =
    _trash_prelude_
    target
    <SPACE "to" SPACE>
    reduce-play-cost-by
trash-to-add-trashed-field-value =
    _trash_prelude_
    target
    <SPACE "to add" SPACE>
    target
    <SPACE "to" SPACE> target
    (<SPACE> duration)?
trash-else =
    _trash_prelude_
    target
    <". If they don't, ">
    (trigger | gain_lose)

trash-zone = _trash_prelude_ zone
deletes-in-battle =
    _trash_prelude_
    (target <SPACE>)?
    <in-battle SPACE?>
    survives?
    (<"," SPACE> (trash-zone | unsuspend))?
instead = <"instead">

trash-or-return =
    trash_delete <" or "> return


(* ACTIVATE *)
activate =
    (target <SPACE>)?
    <#"(?i)Activates?" SPACE> (
          (target <SPACE> timing <(" effect")>)
        | (<"the" (SPACE "following")? SPACE "effect" (SPACE "below")?> (<SPACE> twice)? (<":"> | <".">)? <SPACE>? (li+ / CARD_RULE))
        | keyword-effect
    )
twice = <"twice">
activate-n-effects =
    (conditional <",">? <SPACE>)?
    <#"(?i)Activate">
    <SPACE>
    value
    <SPACE>
    <"of the effects below">
    (
          (<"." SPACE> activate-all-effects-instead)
        | <":">
    )
    li+
activate-all-effects-instead =
    (conditional <",">? <SPACE>)
    <#"(?i)Activate">
    <SPACE "all" SPACE>
    <"of the effects below instead.">


(* END THE ATTACK *)
end-the-attack =
    <("to" SPACE)? "end the attack">


(* SUSPEND/UNSUSPEND *)
<suspend_unsuspend> =
      suspend
    | suspend_or
    | unsuspend
    | suspend-to-play
    | suspend-to-unsuspend
    | suspend-to-return
    | suspend-to-reveal
    | suspend-to-trash
    | suspend-to-trigger
    | suspend-and-disallow-unsuspend
    | suspend-to-hatch-or-move-target-to-battle-area
    | suspend-for-skill
    | (unsuspend <" and "> suspend)
suspend =
    ((conditional | before | <then>) <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)suspend" SPACE>
    target
    (
        (
            <SPACE "to" SPACE>
            (gain_lose | reduce-digivolution-cost-by)
        )
        | add
        | (<"." SPACE then SPACE> place <"." SPACE> trash)
    )?
    (<"." SPACE> disable)?
    (<SPACE> instead)?
    (<SPACE> for-each)?
suspend_or = <#"(?i)suspend "> target <", or "> target
unsuspend =
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)Unsuspend" SPACE> target
    (<SPACE ("by" | "and") SPACE> (gain_lose | trash_delete | return))?
    (
        <"." SPACE "Then, it can attack your opponent's Digimon." SPACE>
        allow-attack-unsuspended
    )?
allow-attack-unsuspended = <"This effect allows you to attack unsuspended Digimon as well">
suspend-to-play =
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)suspend" SPACE> target
    (<SPACE "to" SPACE>? play)
suspend-to-unsuspend =
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)suspend" SPACE> target
    (<SPACE "to" SPACE>? unsuspend)
suspend-to-return =
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)suspend" SPACE> target
    (<SPACE ("to" | "and") SPACE>? return)
suspend-to-reveal =
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)suspend" SPACE> target
    (<SPACE ("to" | "and") SPACE>? reveal)
suspend-to-trash =
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)suspend" SPACE> target
    (<SPACE ("to" | "and") SPACE>? trash_delete)
suspend-to-trigger =
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)suspend" SPACE> target
    (<SPACE ("to" | "and") SPACE>? trigger)
suspend-and-disallow-unsuspend =
    <#"(?i)suspend" SPACE> target
    <"." SPACE> conditional <SPACE> target
    <SPACE "doesn't unsuspend" SPACE> duration
suspend-to-hatch-or-move-target-to-battle-area =
    conditional?
    <SPACE "you can suspend" SPACE>
    target
    <SPACE "to hatch 1 Digi-Egg card to an empty space in your breeding area, or move" SPACE>
    target
    <SPACE "from your breeding area to your battle area">
suspend-for-skill =
    <"suspending" SPACE>
    card-type
    <SPACE "for a" SPACE>
    keyword-effect
    <SPACE "skill">


(* RETURN *)
return =
    <("."? SPACE? (then | ",")? SPACE)>?
    ((conditional | duration) <",">? <SPACE>?)?
    (optional <SPACE>)?
    <#"(?i)return(ing)?" SPACE>
    target
    (<SPACE> other-than)?
    <SPACE ("from" SPACE)?>? zone (<SPACE "to" SPACE> zone)?
    (<SPACE> order)?
    trash_delete?
    (<SPACE "to" SPACE> gain_lose)?
    <"." SPACE PARENTHESES>?
    return?
    (<"." SPACE> trash)?
    trash-those-digivolution-cards?
    (<("." | ", and") SPACE> for-each)?
return-to-return =
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)return(ing)?" SPACE> target
    (<SPACE ("to" | "and") SPACE>? return)
return-to-trash =
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)return(ing)?" SPACE> target
    (<SPACE ("to" | "and") SPACE>? trash_delete)


(* ADD TO HAND *)
add =
    (conditional <SPACE>)?
    (optional <SPACE>)?
    (
        <("."? SPACE? (then | ",") SPACE) | ", and ">?
        <#"(?i)add" SPACE>
        (target_and-or / target / (<" and ">? target)+ / target_or)
        <SPACE>
        (among-them <SPACE>)? <"to" SPACE>?
        zone
        <("." SPACE PARENTHESES)>?
    )
    (<SPACE "to" SPACE> (trigger | (suspend_unsuspend <" and have "> gain_lose)))?
    (<SPACE> shuffle)?
    (<","? SPACE> conditional)?


(* TRIGGER *)
trigger =
    ((conditional | <then> | if-you-do) <",">? <SPACE>)?
    <#"(?i)Trigger" SPACE>?
    keyword-effect
    (<SPACE "on" SPACE> target)?
    (<".">? <SPACE> PARENTHESES)?
    (<SPACE> (play / trash_delete / conditional))?


(* REVEAL *)
reveal =
    ((conditional | <then>) <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)reveal" SPACE> target
    (
        (<SPACE> for-each)?
        <"." SPACE?>
        (play <"." SPACE?>)?
        (add <"." SPACE?>)?
        (gain_lose <"." SPACE?>)?
        (trash_delete <"." SPACE?>)?
        (digivolve-into)?
        (otherwise | _place_)?
        (<"." SPACE> suspend_unsuspend)?
    )?
look-at =
    <#"(?i)look at" SPACE>
    zone
    (
        (
            (
                <"," SPACE then>
                <SPACE> reveal
                <SPACE "in it and" SPACE>
            ) | (
                <"." SPACE>
            )
        )
        add
        (<"." SPACE> trigger)?
        (<SPACE> shuffle)?
    )?


(* OTHERWISE *)
otherwise = <SPACE? "Otherwise" ","? SPACE> _place_


(* PLACE *)
<_place_> =
      place
    | place-to-trash
    | place-to-reveal
    | place-to-gain
    | place-to-disallow
place =
    ((conditional | <then>) <SPACE>)?
    (optional <SPACE>)?
    <("."? SPACE)>?
    <#"(?i)plac(es?|ing)" SPACE>
    target
    (
        <SPACE>
        (
            (zone <SPACE> zone)
            / zone
        )
        (<SPACE> order)?
    )?
    (<"." SPACE> trigger)?
    trash-those-digivolution-cards?
place-to-trash = place <"," SPACE> trash
place-to-reveal = place <"," SPACE> reveal
place-to-gain = place <("," | " to") SPACE> gain_lose
place-to-disallow = place <"," SPACE> disallow

order = order_any
order_any = <"in any order">


(* LIST ITEM *)
<li> = <("・" | "*")> CARD_RULE


(* SEARCH *)
search =
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)search">
    <SPACE> zone <SPACE "for" SPACE> target
    (<"," SPACE> reveal)?
    (<","? " and "> (play | add))


(* SHUFFLE *)
shuffle =
    <then SPACE>?
    <#"(?i)shuffle">
    <SPACE> zone


(* ALSO TREAT AS *)
also-treat-as =
    (
          <#"(?i)Also treat(ed)? as" SPACE>
        | <SPACE "as if the" SPACE card-type SPACE "is a" SPACE>
    )
    (treat-as-name | treat-as-traits | color | level)+ (<SPACE> card-type)?
treat-as-name = <(SPACE "and" | "if") SPACE "name is" SPACE> mention
treat-as-traits =
    (
        <(SPACE "and" SPACE)? "traits include" SPACE> mention
    ) | (
        <"having the" SPACE> mention <SPACE "trait">
    )


(* ATTACK *)
attack =
    (
        target
        <SPACE>
        (optional <SPACE>)?
        <#"(?i)attacks?" SPACE>
        PARENTHESES?
    ) / (
        (conditional <",">? <SPACE>)?
        (
            (
                target
                <SPACE>
                (optional <SPACE>)?
                <#"(?i)attacks?" SPACE>
                (PARENTHESES <"," SPACE>)?
            ) / (
                <#"(?i)attacking" SPACE>
            )
        )
        (suspend_unsuspend / target)
        (<SPACE> duration)?
    )


(* TARGET *)
target =
    (
        (
              itself
            | that
            | (opponent / you)
            | owner
            | player
            | players
            | all-players
            | remaining_cards
            | target-effect
            | security-stack
            | number-of-cards
        )
        / moves-between
        / mention
        / (value <SPACE> card-type <" and "> card-type)
        / card-type
        / zone
    )
    (<SPACE> has-attribute)?
target_and-or = target <" and/or "> target
target_or = target <" or "> target
itself = <#"(?i)This"> (<SPACE> card-type)?
that =
    (
        <"of" SPACE>?
        (
              (<#"(?i)That|Those" SPACE> card-type)
            / <#"(?i)Its?">
            / (<"the played" SPACE> card-type)
            / (<"the" SPACE> card-type)
        )
    )
    | <"they">
    | (<"all of the revealed" SPACE> card-type)
you =
    (
        (value <SPACE>)?
        <"of" SPACE>?
        (
              ((card-type <SPACE>)? <#"(?i)you(\'ve)?">)
            | (
                (
                    <#"(?i)Your">
                    (<SPACE> other)?
                    (<SPACE> (<" and ">? card-type)+)?
                ) / (
                    <#"(?i)Your">
                    (<SPACE> other)?
                    (<SPACE> zone)?
                )
            )
        )
        (
            <SPACE>
            ("have" | do-not-have)
        )?
        (
            <SPACE>
            (value <SPACE>)?
            (number-of-cards | state | level)
        )?
        (<SPACE> target-effect)?
        (<SPACE> (<" and ">? card-type)+)?
        (<SPACE> (keyword-effect | DP))?
    )
do-not-have = <"don't have">
other = <"other">
other-than = <"other than" SPACE> target
opponent =
    (
        (value <SPACE>)?
        <"of" SPACE>?
        (state <SPACE>)?
        (<#"(?i)(your |an )?opponent(\'s)?"> | <#"(?i)their">)
        (<SPACE> zone)?
        <(SPACE ("have" | "has"))>?
        (
            <SPACE>
            (value <SPACE>)?
            (number-of-cards | state | level)
        )?
        (<SPACE> target-effect)?
        (<SPACE> (<" and ">? card-type)+)?
        (<SPACE> (keyword-effect | DP))?
    )
owner = <"its owner's"> | <"their owners'">
player = <"a" SPACE>? <#"(?i)player">
players = <"a" SPACE>? <#"(?i)player\'?s\'?">
all-players =
    (
          (<(#"(?i)Neither" | #"(?i)Both") SPACE #"(?i)player\'?s\'?"> (<SPACE> (zone | card-type))?)
        | <"you or your opponent">
    )
card-type =
    mention / (
        <"another" SPACE>?
        (state <SPACE>)?
        (mention <SPACE>)?
        (
            (
                  digi-egg_card-type
                | digimon_card-type
                | (security_digimon_card-type / security_card-type)
                | tamer_card-type
                | option_card-type
            ) / any_card-type / target
        )
        (
            <SPACE "is" SPACE>?
            also-treat-as
        )?
        (<SPACE> field)?
        (<SPACE> (is-named / mention / has-attribute))?
        (<(SPACE "from")? SPACE> zone)?
        (<SPACE> same-name)?
        (<SPACE> using-effect)?
        (<SPACE> state)?
        (<SPACE> this-way)?
    ) / color / card-type-or
card-type-or = (value <SPACE>)? card-type <" or "> card-type
this-way = <"you" SPACE> (this-way_suspend | this-way_return) <SPACE "this way">
this-way_suspend = <"suspend">
this-way_return = <"return">
has-attribute =
    (
        (<#"(that )?has"> | <"that's"> | <with>)
        <SPACE>
        (card-type-or / (color | level | keyword-effect))
    )
same-name = <"that share a name with it"> | (<"with the same name as" SPACE> target)
remaining_cards = <"the remaining cards" | "the rest">
field = <with SPACE>? (MAX <SPACE>)? (field_level | field_color | field_play-cost | field_DP)
field_level = <#"levels?">
field_color = <#"colors?">
field_play-cost = <#"play costs?">
field_DP = <"DP">

any_card-type =
    (
        (
            (value <SPACE>)?
            ((color | level) <SPACE>?)*
            <#"card(\'?s)?">
            (<SPACE ("is" | "are") SPACE> color)?
        ) / (
            (value <SPACE>)
            ((color | level) <SPACE>?)+
        )
    )
digimon_card-type =
    (value <SPACE>)?
    ((color | level) <SPACE>)*
    <"card is a" SPACE>?
    <#"(?i)Card" "/">?
    <#"(?i)Digimon(\'s)?">
    <SPACE #"card(\'?s)?">?
    <SPACE>?
    (
        (
            (
                <SPACE with (SPACE "a")? SPACE>
                |
                <(SPACE "that")? SPACE "has" SPACE>
            )?
            (DP | level | mention | keyword-effect)
            (<SPACE> among-them)?
        ) / (
            <SPACE> zone
        )
    )?
    (<SPACE> state)?
    (<SPACE "whose" SPACE> field (<SPACE> (value | (LTE | GTE)))?)?
    (<SPACE (with SPACE)?> play-cost)?
security_digimon_card-type = <#"(?i)Security Digimon"> <SPACE "card">?
security_card-type = (value <SPACE>)? <#"(?i)Security cards?"> (<SPACE> (LTE | GTE))?
digi-egg_card-type = (value <SPACE>)? <#"(?i)Digi-Eggs?"> <SPACE #"cards?">?
tamer_card-type =
    (value <SPACE>)?
    ((color | level) <SPACE>)*
    <#"(?i)Card" "/">?
    <#"(?i)Tamers?">
    <SPACE #"cards?">?
    (<SPACE> play-cost)?
option_card-type = (value <SPACE>)? ((color | level) <SPACE>)* <#"(?i)Options?"> <SPACE #"cards?">? (<SPACE> play-cost)?


(* ZONES *)
zone =
    (
        zones
        <SPACE "on">
    ) / (
        (location <SPACE>)?
        zones
    ) / (
        (location <SPACE>)?
        (zones <SPACE>)?
        (value <SPACE>)?
        <(#"cards?" SPACE)? ("from" | "of" | "in" | "to") SPACE>?
        (location <SPACE>)?
        (
            (zone_or / zones)
            /
            ((target <SPACE>) (zone_or / zones))
            /
            ((zone_or / zones) (<SPACE> target))
        )
    )
<zones> =
    (
          zone_deck
        | zone_digi-egg-deck
        | zone_hand
        | zone_trash
        | zone_security
        | zone_breeding-area
        | zone_battle-area
    ) / zone_digivolution-cards
zone_or = zones <" or "> zones
zone_deck =
    (value <SPACE>)?
    <#"cards?" SPACE>?
    <"in" SPACE>? (target <SPACE>)?
    <#"decks?">
zone_digi-egg-deck =
    (value <SPACE>)?
    <#"cards?" SPACE>?
    <"in" SPACE>? (target <SPACE>)?
    <"Digi-Egg deck">
zone_hand =
    (value <SPACE>)?
    <#"cards?" SPACE>?
    <"in" SPACE>? (target <SPACE>)?
    <#"hands?">
zone_trash =
    (value <SPACE>)?
    <#"cards?" SPACE>?
    <"is" SPACE>?
    <"in" SPACE>?
    (target <SPACE>)?
    <("trash" | "recycle bin")>
zone_security =
    (value <SPACE>)?
    <#"cards?" SPACE>?
    <"in" SPACE>?
    (target <SPACE>)?
    <"security" (SPACE (#"stacks?" | "cards"))?>
    <SPACE "face down">?
zone_breeding-area =
    (value <SPACE>)?
    <#"cards?" SPACE>?
    <"in" SPACE>?
    (target <SPACE>)?
    <(#"(?i)Breeding" | #"(?i)Raising") SPACE "area">
zone_battle-area =
    (value <SPACE>)?
    <#"cards?" SPACE>?
    <"in" SPACE>?
    (target <SPACE>)?
    <#"(?i)battle area">
zone_digivolution-cards =
    (<"as its" SPACE>? location <SPACE>)?
    (<"from" SPACE> target <SPACE>)?
    (<"that" SPACE>? <"has" SPACE>? value <SPACE>)?
    (<"in" SPACE> target <SPACE>)?
    (target <SPACE>)?
    (level <SPACE>)?
    <(("had" | "the") SPACE)? #"(?i)digivol(ve|ving|ution) card(s)?">
    (<SPACE> location <SPACE> target)?
    (<SPACE "of" SPACE> value <SPACE "of" SPACE> target)?
moves-between =
    target
    <SPACE #"moves?" SPACE "from the" SPACE>
    zone <SPACE "to" SPACE> zone

number-of-cards = <"the number of cards in"> <SPACE> zone (<SPACE> (LTE | GTE))?

digivolution-cards-include =
    (
        target <SPACE>
        (<"the" SPACE>)?
        <#"(?i)digivol(ve|ving|ution)" SPACE #"card(s)?">
        <SPACE "include" SPACE>
        target
    ) | (
        target <SPACE>
        (<"is in" SPACE>)?
        target <SPACE>
        <#"(?i)digivol(ve|ving|ution)" SPACE #"card(s)?">
    )


(* CHOOSE *)
choose =
    (optional <SPACE>)?
    (<#"(?i)Choose" SPACE>)
    target
    conditional?
    (<(SPACE "and" | "." SPACE)> <SPACE>?)?
disable =
    (conditional <"," SPACE>)?
    target <SPACE>
    (<#"(?i)can(\'t)?"> | <"doesn't">)
    (
        (<SPACE "or">? <SPACE> (<"be"> | <"have">))?
        (<SPACE> (state | gain_lose | dp-reduced | returned-to | unsuspend) (<SPACE> target)?)?
        (<SPACE "be" SPACE> state)?
    )+
    <SPACE "or">?
    (<SPACE> target-effect)?
    (<SPACE> state)?
    (<SPACE> duration)?
except = <"except">
only = <"only">
target-effect = (except <SPACE>)? <("by" | with) SPACE>? target <SPACE #"effects?">
dp-reduced = <"its DP reduced">
returned-to =
    <"returned to its owner's" SPACE> zone

in-battle = <"in battle">

(* SECURTIY STACK *)
(* NOTE: Attacking a player is also the same as attacking security *)
security-stack = value <SPACE> location <SPACE> <"of" SPACE> target <SPACE> <"security stack">
any-security-stack-decremented = <"a card is removed from a player's security stack">

<disallow> =
      disallow-attack
    | disallow-block
    | disallow-attack-and-block
    | disallow-reduce-play-cost
    | disallow-reduce-digivolution-cost
    | disallow-activation
    | disallow-trash-or-return
    | disallow-unsuspend
    | disallow-all-unsuspend
    | disallow-leaving-play-by-trashing
disallow-attack =
    (
        target
        <SPACE "can't attack" SPACE>
        target
    )
    |
    (
        duration <"," SPACE>
        target
        <SPACE "can't attack">
    )
disallow-block =
    target
    <SPACE "can't be blocked by" SPACE>
    target
disallow-unsuspend =
    (
        target
        <SPACE "don't unsuspend">
        (<SPACE> duration)?
    )
disallow-all-unsuspend =
    (
        duration <"," SPACE>
        <"none of" SPACE>
        target
        <SPACE "can unsuspend">
    )
disallow-attack-and-block =
    (
        choose?
        target
        <SPACE "can't attack or block" SPACE>
        (target | duration)
    )
    |
    (
        duration <"," SPACE>
        target
        <SPACE "can't attack or block">
    )
disallow-reduce-play-cost = target <SPACE> <"can't reduce play" SPACE #"costs?">
disallow-reduce-digivolution-cost = target <SPACE> <"can't reduce digivolution" SPACE #"costs?">
disallow-activation =
    (conditional <"," SPACE>)?
    (
        target
        <SPACE ("doesn't" | "don't") SPACE "activate" SPACE>
        timing-effects-on
    ) | (
        timing-effects-on
        <SPACE ("doesn't" | "don't") SPACE "activate">
    )

disallow-trash-or-return = target <SPACE> <"can't delete"> <SPACE> target <" or "> return <SPACE> duration

disallow-leaving-play-by-trashing =
    (before <"," SPACE>)?
    (optional <SPACE>)?
    <#"(?i)Prevent" SPACE "it">
    <SPACE "from leaving play by" SPACE>
    trash_delete


if-you-do = <"If you do">
then = <#"(?i)Then,?"> | <#"(?i)When you do,?">
conditional =
    (
        (
            <then SPACE>?
            (
                    (
                        (<#"(?i)When"> | <#"(?i)While"> | <#"(?i)If">)
                        (
                              <SPACE "there are">
                            | <SPACE "it's a">
                        )?
                    )
                    <SPACE>
            )
            (
                (
                    (
                          play
                        / activate
                        / activate-n-effects
                        / attack
                        / player-turn
                        / dna-digivolving
                        / any-security-stack-decremented
                        / digivolve-into
                        / suspend-for-skill
                        / digivolution-cards-include
                        / target
                    )
                    <","? SPACE?>
                ) / (
                    target <SPACE>
                    (
                          level
                        | trash_delete
                        | play-cost
                        | memory
                        | keyword-effect
                    )
                    <","? SPACE?>
                )
            )
            <"," SPACE>?
            (instead <SPACE>)?
        )
        / (conditional <"." SPACE> for-each)
        / for-each
    )+
    (<"." SPACE> disable)?

(* PLAYER TURNS *)
player-turn = player-turn_you
player-turn_you = <"it's" SPACE>? <"your turn">

for-each =
    <then SPACE>?
    <#"(?i)For" SPACE ("every" | "each") SPACE>
    <"other" SPACE>?
    <"of" SPACE>?
    target
    <SPACE "has">?
    (
        <("," | ".")? SPACE>
        (you | opponent | owner | activate | broaden-effect-target | gain_lose)
    )?

broaden-effect-target =
    <"add" SPACE>
    value
    <SPACE "to the" SPACE>
    <#"max(imum)?" SPACE>
    field
    <SPACE "of the" SPACE card-type SPACE "you can choose with this effect">

location = (location_top | location_bottom) / location_anywhere / location_or
location_or = (location <" or "> location)
location_anywhere = <#"(placed )?under">
location_bottom =
    (
        <"face down" SPACE>?
        <"at" SPACE>?
        <"to" SPACE>?
        <"from" SPACE>?
        <"on" SPACE>?
        <"the" SPACE>?
        <"bottom">
        <SPACE "of">?
    ) | <"under">
location_top =
    <"face down" SPACE>?
    <"at" SPACE>?
    <"to" SPACE>?
    <"from" SPACE>?
    <"on" SPACE>?
    <"the" SPACE>?
    <"top">
    <SPACE "of">?


(* STATE *)
state =
    ((did-not | does-not) <SPACE>)?
    (tense <SPACE>)?
    (
          attacks
        | attacking
        | block
        | blocked
        | blockable
        | unblockable
        | battling
        | digivolved
        | dna-digivolving
        | survives
        | deleted
        | suspended
        | unsuspended
        | in-play
        | added-to
    )
    (<SPACE> duration)?
tense = is | becomes | was
is = <"is">
was = <"was">
becomes = <"becomes">
did-not = <("didn't" | "did not")>
does-not = <("doesn't" | "does not")>


attacks = <#"attack(ed|s)?"> (<SPACE> with <SPACE> card-type <SPACE> duration)?
attacking = <"attacking">
with = <#"(?i)with"> <SPACE "a">?
without = <"without"> <SPACE "a">?
block = <#"blocks?">
blocked = <"blocked">
blockable = <"blockable">
unblockable = <"unblockable">
battling = <"battling">
digivolved = <"that" SPACE>? <#"digivolve[sd]?"> (<SPACE> target)? (<SPACE "from" SPACE> level <SPACE "to" SPACE> level)?
dna-digivolving = <"DNA digivolving">
survives = <("and" SPACE)? "survives">
deleted = <("deleted" | "trashed" | "removed")> (<SPACE> deleted-by)? (<SPACE> in-battle)? (<SPACE> zone)?
deleted-by =
    (
          (<"by" SPACE> (DP | effect))
        | target-effect
    ) | (
        <"due to activating" SPACE>
        target
    )
effect = <("an" SPACE)? "effect">
added-to = <"added"> (<SPACE> target-effect)? (<SPACE> zone)?
suspended = <"suspended">
unsuspended = <#"unsuspend(ed)?">
in-play = <"in play">


(* DIGIVOLVE INTO *)
digivolve-into =
    (
          (conditional <",">? <SPACE>)?
        / ((conditional <",">? <SPACE>)? target)
        / before
        / optional
    )?
    <SPACE>?
    <"can" SPACE>? (only <SPACE>)? <#"(?i)digivolv(es?|ing)?"> (<SPACE> target (<SPACE> among-them)?)? <SPACE #"[io]nto" SPACE>
    target
    (<SPACE> among-them)?
    <SPACE>?
    play-cost?
    <(","? SPACE)>?
    (ignore-digivolve-requirements | reduce-digivolution-cost-by | suspend_unsuspend | without-paying-memory-cost)?
ignore-digivolve-requirements = <"ignoring" SPACE> <("its" | "this card's")> <SPACE "digivolution requirements">
optionally-dna-digivolve =
    <"You may DNA digivolve this Digimon and">
    <" one of your other Digimon in play into a Digimon card in your hand ">
    <("for" | "by paying")>
    <" its DNA digivolve cost">


(* UNAFFECTED BY EFFECTS *)
unaffected-by-effects-of =
    (conditional <",">?)
    <SPACE "it isn't affected by the effects of" SPACE>
    target


(* SWITCH ATTACK TARGET *)
switch-attack-to =
    choose
    <"If they do," SPACE>?
    <#"(?i)Switch" SPACE "the target of attack to" SPACE> target


(* MENTIONS *)
<_mention_> = #"[\[][^\]]*[\]]" <SPACE PARENTHESES ","?>?
token = _mention_ <SPACE #"(?i)Tokens?">
token-attributes =
    <"(" #"\w+? (?i)Tokens?" SPACE "are" SPACE>
    card-type
    <", ">
    DP
    <", and are ">
    form
    <", ">
    digimon-type
    <", and ">
    attribute
    <".)">
form = #"\w+" <SPACE "form">
digimon-type = #"\w+" <SPACE "type">
attribute = #"\w+" <SPACE "attribute">
mention_value_or = ((token / _mention_) <"," SPACE>?)+ <SPACE? "or "> (token / _mention_)
mention_or = (mention <"," SPACE>?)+ <SPACE? "or "> mention
mention =
    mention_or / (
        <with SPACE>?
        <"has" SPACE>?
        (value <SPACE>)?
        (
            <" and ">?
            (
                (in-name | in-traits | in-form | in-attributes | in-digimon-type)
                / mention_value_or
                / (token / _mention_)
            )
        )+
        (<" and "> play-cost)?
    )
is-named = <"is" SPACE> (token / _mention_)
in-name = (mention_value_or / (token / _mention_)) <SPACE "in" SPACE> <("its" | "their") SPACE>? <#"names?"> <SPACE PARENTHESES>?
in-traits = (mention_value_or / (token / _mention_)) <SPACE "in" SPACE> <("its" | "their") SPACE>? <#"traits?">
in-form = (mention_value_or / (token / _mention_)) <SPACE "in" SPACE> <("its" | "their") SPACE>? <#"forms?">
in-attributes = (mention_value_or / (token / _mention_)) <SPACE "in" SPACE> <("its" | "their") SPACE>? <#"attributes?">
in-digimon-type = (mention_value_or / (token / _mention_)) <SPACE "in" SPACE> <("its" | "their") SPACE>? <#"types?">
