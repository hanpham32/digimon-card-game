<S> = EFFECT / EFFECT+
    
EFFECT =
    (
        (
            (
                <SPACE>?
                keyword-effect
                <SPACE>?
            )+
            | keyword-effect_dna-digivolve
        )
        /
        (
            (
                (
                    (
                        <SPACE>?
                        (timing | phase)
                        (<SPACE>? keyword-effect)?
                        <SPACE>?
                    )+
                    | keyword-effect_dna-digivolve
                )
                <SPACE>?
            )*
            (
                (
                    <"."? (","? SPACE (then | "and"))? SPACE>?
                    TOP_LEVEL_EFFECTS
                ) / (
                    <"."? (","? SPACE (then | "and"))? SPACE>?
                    TOP_LEVEL_EFFECTS
                )+
            )
        )
    )
    <".">?
<SPACE> = #"\s+" | "―"
<OPEN_QUOTE> = "“" | '"'
<CLOSE_QUOTE> = "“" | "”" | '"'
<TOP_LEVEL_EFFECTS> =
    (
        (
              gain_lose
            / _pay_
            / play
            / suspend_unsuspend
            / trash_delete
            / activate
            / activate-n-effects
            / activate-that-timing-effect-on
            / attack
            / _return_
            / _add_
            / trigger
            / reveal
            / look-at
            / _place_
            / search
            / shuffle
            / li
            / (disallow / disable)
            / reduce-play-cost-by
            / reduce-digivolution-cost-by
            / increase-digivolution-cost-by
            / digivolve-into
            / change-into
            / optionally-dna-digivolve
            / treat-as
            / unaffected-by-effects-of
            / set-memory-to
            / set-original-dp-to
            / set-play-cost-to
            / set-digivolution-cost-to
            / switch-attack-to
            / deck-limit-of-this-card
            / ignore-all-digivolve-requirements
            / hatch
            / amplify-effect
            / choose
            / timing_digivolve
            / replace-digixros-requirement-with
        )
        / target
    )

<PARENTHESES> = <#"[(][^)]*[)]">
<optional_mandatory> = optional | mandatory
optional = (target <SPACE>)? <("may" | "can" | #"(?i)By")> <SPACE "also">?
mandatory = (target <SPACE>)? <"must">
before =
    (
        (
            <(#"(?i)When" | #"(?i)If") SPACE>?
            (target | target-effect)
            <SPACE "would">
            <SPACE "be">?
            (<SPACE> (state | trash-or-return | play | "DigiXros"))?
            <",">?
        ) / (
            <#"(?i)The next time">
            <SPACE> target
            <SPACE "would">?
            <SPACE "be">?
            <SPACE> state
            (<SPACE> duration)?
            <",">
        ) / (
            <#"(?i)The next time">
            <SPACE> digivolve-into
            (<SPACE> duration)?
            <",">
        ) / (
            <"would">?
            <SPACE "be">?
            <SPACE> state
            (<SPACE> duration)?
        )
    )

OPERATOR = "+" | "-"
LTE =
    (
          <#"(?i)Up to">
        | <#"or (less|lower|fewer)">
        | <"fewer than">
        | <("is" SPACE)? "less than or equal" (SPACE "to")?>
    )
    (<SPACE> equate-with)?
GTE = <#"or (more|higher)"> (<SPACE> equate-with)?
MAX = <"the highest">
MIN = <"the lowest">
ZERO = (<"no"> | <"none">)
no-other = <"no other">
ONE = <#"(?i)An?" | #"(?i)The" | #"(?i)One">
ALL =
    (
        <#"(?i)all">
        <(SPACE "of" (SPACE "the")?)>?
    ) | <"each">
ANY = <#"(?i)any"> <SPACE "number">? <SPACE "of">?
INFINITE = <"∞">
value =
    (
        <(with SPACE)>?
        (
              ALL | ANY | ZERO | ONE | no-other
            | (
                (LTE <SPACE>)?
                OPERATOR?
                ((#"[0-9]+" | INFINITE) (<SPACE> (<"of"> | such))? / (MIN | MAX))
                (<SPACE> (LTE | GTE))?
                (<SPACE> sum)?
            )
        )
    ) / value_or / (LTE | GTE)
value_or = (value <" or "> value)
such = <"such">
equate-with =
    (
        target <SPACE> field
    ) / target / zone
among-them = <"among" SPACE ("them" | "the revealed cards")>

(* COLORS *)
color =
      color_and-or
    / color_or
    / (non? _colors_)
    / n-color
<_colors_> = (red | blue | yellow | green | purple | black | white)
n-color =
    value <"-color" SPACE>
    (
          (_colors_ <SPACE "and" SPACE> _colors_)
        | with <SPACE>? _colors_
    )
non = <"non-">
color_and-or = _colors_ <SPACE and-or SPACE> _colors_
color_or = (<","? (SPACE "or")? SPACE>? _colors_)+
red = <#"(?i)red">
blue = <#"(?i)blue">
yellow = <#"(?i)yellow">
green = <#"(?i)green">
purple = <#"(?i)purple">
black = <#"(?i)black">
white = <#"(?i)white">


(* PHASE *)
phase =
    <"[">
    (
          breeding
        | hand
        | once-per-turn
        | twice-per-turn
        | trash_phase
    )
    <"]">
breeding = <"Breeding">
hand = <"Hand">
once-per-turn = <"Once Per Turn">
twice-per-turn = <"Twice Per Turn">
trash_phase = <"Trash">


(* TIMING *)
timing =
    (
          timing_all-turns
        | timing_start-of-opponent-turn
        | timing_end-of-opponent-turn
        | timing_start-of-your-turn
        | timing_end-of-your-turn
        | timing_when-attacking
        | timing_your-turn
        | timing_opponent-turn
        | timing_main
        | timing_counter
        | timing_end-of-all-turns
        | timing_on-play
        | timing_end-of-attack
        | timing_start-of-your-main-phase
        | timing_start-of-opponent-main-phase
        | timing_security
        | timing_when-digivolving
        | timing_on-deletion
    )

timing_all-turns = <"[All Turns]">
timing_start-of-opponent-turn = <"[Start of Opponent's Turn]">
timing_end-of-opponent-turn = <("At End of Opponent's Turn" | "End of Opponent's Turn")>
timing_start-of-your-turn = <"[Start of Your Turn]">
timing_end-of-your-turn = <"[End of Your Turn]">
timing_when-attacking = <"[When Attacking]">
timing_your-turn = <"[Your Turn]">
timing_opponent-turn = <"[Opponent's Turn]">
timing_main = <"[Main]">
timing_counter = <"[Counter]">
timing_end-of-all-turns = <"[End of All Turns]">
timing_on-play = <"[On Play]">
timing_end-of-attack = <"[End of Attack]">
timing_start-of-your-main-phase = <"[Start of Your Main Phase]">
timing_start-of-opponent-main-phase = <"[Start of Opponent's Main Phase]">
timing_security = <"[Security]">
timing_when-digivolving = <"[When Digivolving]">
timing_on-deletion = <"[On Deletion]">
timing_digivolve =
    <"[Digivolve]">
    <SPACE>?
    (digivolve-cost-from_or / digivolve-cost-from)
digivolve-cost-from_or =
    digivolve-cost-from <"/"> digivolve-cost-from
digivolve-cost-from =
    (
        value
        <SPACE ("from" | "if") SPACE>
        (digivolution-cards-include / target)
    ) | (
        (digivolution-cards-include / target)
        <": Cost" SPACE> value
    )

activate-that-timing-effect-on =
    (conditional <",">? <SPACE>)?
    <#"(?i)Activate" SPACE>
    (
        (
            value <SPACE "of" SPACE>
            target <SPACE>
            timing
            <SPACE (#"skills?" | #"effects?")>
        )
        | (
            value <SPACE>
            timing
            <SPACE (#"skills?" | #"effects?")>
            <SPACE "on" SPACE> target
        )
    )
    <SPACE "as an effect of" SPACE> target
timing-effects =
    <"an" SPACE>?
    (<" and ">? timing)+
    <SPACE (#"skills?" | #"effects?")>
timing-effects-on =
    (
        (value <SPACE "of" SPACE>)?
        <#"(?i)The" SPACE>?
        timing-effects
        <SPACE ("on" | "of") SPACE>
        target
    ) | (
        (value <SPACE>)? target <SPACE> timing-effects
    )


(* KEYWORD-EFFECT *)
use = <#"(?i)use"> <SPACE>
keyword-effect =
    (
        use?
        (without <SPACE>)?
        (
              blocker
            | digi-burst
            | draw
            | rush
            | security-attack
            | alliance
            | armor-purge
            | barrier
            | blast-digivolve
            | blitz
            | de-digivolve
            | decoy
            | delay
            | digi-burst
            | digisorption
            | evade
            | fortitude
            | jamming
            | material-save
            | mind-link
            | overflow
            | piercing
            | raid
            | reboot
            | save
            | retaliation
            | recovery
            | digixros
        )
        (<SPACE> (target | state))?
        (<"."? SPACE?>? PARENTHESES)?
    ) / keyword-effect_or
keyword-effect_or =
    keyword-effect <SPACE "or" SPACE> keyword-effect
blocker = <#"[\<＜]"> <#"(?i)Blocker"> <#"[\>＞]"> <" to suspend one of your " card-type>?
digi-burst = <#"[\<＜]"> <#"(?i)Digi\-Burst"> <SPACE>? value <#"[\>＞]">
draw = <#"[\<＜]"> <#"(?i)Draw"> <SPACE>? value <#"[\>＞]">
rush = <#"[\<＜]"> <#"(?i)Rush"> <#"[\>＞]">
security-attack = <#"[\<＜]"> <(#"(?i)S Attack" | #"(?i)Security A(\.|ttack)")> (<SPACE>? value)? <#"[\>＞]">
alliance = <#"[\<＜]"> <#"(?i)Alliance"> <#"[\>＞]">
armor-purge = <#"[\<＜]"> <#"(?i)Armor Purge"> <#"[\>＞]">
barrier = <#"[\<＜]"> <#"(?i)Barrier"> <#"[\>＞]">
blast-digivolve = <#"[\<＜]"> <#"(?i)Blast Digivolve"> <#"[\>＞]">
blitz = <#"[\<＜]"> <#"(?i)Blitz"> <#"[\>＞]">
de-digivolve = <#"[\<＜]"> <#"(?i)De\-Digivolve"> (<SPACE>? value)? <#"[\>＞]"> (<SPACE "on">? <SPACE> target)?
decoy =
    <#"[\<＜]">
    <#"(?i)Decoy">
    <SPACE>?
    <"(">
    (
          ((<"/">? color)+ <"trait">?)
        | mention
    )
    <")">
    <#"[\>＞]">
delay = <#"[\<＜]"> <#"(?i)Delay"> <#"[\>＞]"> (<"."? SPACE?>? PARENTHESES)? <SPACE>? li+
digi-burst = <#"[\<＜]"> <#"(?i)Digi\-Burst"> (<SPACE>? value)? <#"[\>＞]">
digisorption = <#"[\<＜]"> <#"(?i)Digisorption"> (<SPACE>? value)? <#"[\>＞]">
evade = <#"[\<＜]"> <#"(?i)Evade"> <#"[\>＞]">
fortitude = <#"[\<＜]"> <#"(?i)Fortitude"> <#"[\>＞]">
jamming = <#"[\<＜]"> <#"(?i)Jamming"> <#"[\>＞]">
material-save = <#"[\<＜]"> <#"(?i)Material Save"> <SPACE>? value <#"[\>＞]">
mind-link = <#"[\<＜]"> <#"(?i)Mind Link"> <#"[\>＞]">
overflow = <#"[\<＜]"> <#"(?i)Overflow"> <SPACE>? <"("> value <")"> <#"[\>＞]">
piercing = <#"[\<＜]"> <#"(?i)Piercing"> <#"[\>＞]">
raid = <#"[\<＜]"> <#"(?i)Raid"> <#"[\>＞]">
reboot = <#"[\<＜]"> <#"(?i)Reboot"> <#"[\>＞]">
save = <#"[\<＜]"> <#"(?i)Save"> <#"[\>＞]">
retaliation = <#"[\<＜]"> <#"(?i)Retaliation"> <#"[\>＞]">
recovery = <#"[\<＜]"> <#"(?i)Recovery"> (<SPACE>? value)? <SPACE>? <"(Deck)"> <#"[\>＞]">
digixros =
    <#"[\<＜]"> <#"(?i)DigiXros"> (<SPACE>? value)? <#"[\>＞]">
    <SPACE>
    (
          target
        / (<SPACE ("+" | "×") SPACE>? target)+
    )
    <SPACE>?
    (
        (
            <"When you would play this card, you may place specified cards from your hand/battle area under it.">
            <SPACE "Each placed card reduces the play cost">
        ) | (
            <"On play, place from hand/battle area under this card. Reduce play cost per card">
        )
    )?
digixrosing = <#"(?i)DigiXrosing"> (<SPACE with>)? (<SPACE> target)?

keyword-effect_dna-digivolve =
    <#"[\<＜]">
    <"DNA Digivolution:" SPACE>
    value
    <SPACE "from" SPACE>
    dna-digivolve-requirement <" + "> dna-digivolve-requirement
    <#"[\>＞]">
    <SPACE? "Digivolve unsuspended with the 2 specified Digimon stacked on top of each other.">?
dna-digivolve-requirement = (color <SPACE>)? level


(* GAIN/LOSE *)
gain_lose =
    ((conditional | choose) <",">? <SPACE>)?
    (<"and" SPACE>? before <",">? <SPACE>)?
    (duration <",">? <SPACE>)?
    (
          lose
        | (gain / (gain <" and "> trigger))
        | gain-state-by
    )+
    (
          (<SPACE> gain-that-instead)
        | (<SPACE> conditional)
    )?
    (<SPACE> duration (<SPACE> conditional)?)?
    (<SPACE> instead)?
    (<("."? SPACE)>? PARENTHESES)?
lose =
    <#",?( and )?">?
    <SPACE>?
    (target <SPACE>)?
    <(#"(?i)(loses?|decreasing your)") SPACE>
    (
        <("," SPACE?)? (SPACE "and" SPACE)?>?
        (
              DP
            | keyword-effect
            | memory
            | attack
            | disallow
            | returned-to
            | target-effect
            | ((<"the following effect" SPACE> duration <":">? <SPACE>)? <OPEN_QUOTE> EFFECT <CLOSE_QUOTE>)
        )
    )+
gain =
    <("," SPACE?)? (SPACE "and" SPACE)?>?
    <SPACE>?
    ((<" and ">? target)+ <SPACE>)?
    <"all" SPACE>?
    <(#"(?i)gets?" | #"(?i)give" | #"(?i)gains?") SPACE>
    (target <SPACE>)?
    (
        <("," SPACE?)? (SPACE "and" SPACE)?>?
        (
              DP
            | keyword-effect
            | memory
            | attack
            | disallow
            | returned-to
            | target-effect
            | ((<"the following effect" SPACE> duration <":">? <SPACE>)? <OPEN_QUOTE> EFFECT <CLOSE_QUOTE>)
        )
    )+
gain-state-by =
    optional_mandatory
    <SPACE "make" SPACE>
    target
    <SPACE> state
    <SPACE> duration
    <SPACE "by" SPACE>
    return
gain-that-instead =
    conditional <"," SPACE>
    (target <SPACE>)?
    <(#"(?i)gets?" | #"(?i)give" | #"(?i)gains?") SPACE "it instead">
DP =
    (
          <"whose total" SPACE>
        | (<(with | "dropping to") SPACE>? value)
    )?
    <SPACE>?
    <"DP">
    (<SPACE> sum)?
    (<SPACE> (LTE | GTE))?
sum =
      ((mandatory <SPACE>)? <#"adds?" SPACE "up to" SPACE> value)
    | (<"for each of its" SPACE> field)
    | (<"combined" SPACE> field)
    | <"total">
    | (<"so that their" SPACE> field <SPACE "total is" SPACE> value)
level =
    (<("a" | "is") SPACE>)?
    (<#"[Ll][Vv]\."> | <#"(?i)level\s+">)
    (<SPACE>? <"of">)?
    <SPACE>? value
memory =
    (value <SPACE>)?
    <"memory">
    (
          (<SPACE "by" SPACE> (value | target-effect))
        | (<SPACE> (LTE | GTE))
    )?
set-memory-to = conditional <"set" SPACE> target <SPACE ("memory" SPACE)? "to" SPACE> value
set-original-dp-to = <"Change the original DP of" SPACE> target <("," | (SPACE "to")) SPACE> value <SPACE> duration
set-play-cost-to =
    (conditional <SPACE>)?
    (
          (<"its memory cost is equal to" SPACE> number-of-cards)
        | <"set" SPACE> target <SPACE "play cost to" SPACE> value
    )
set-digivolution-cost-to =
    (
        <"." SPACE>?
        (conditional <SPACE>)?
        (
              (<"the memory cost of the digivolution is equal to" SPACE> number-of-cards)
            | (<"the memory cost is" SPACE> value)
        )
    )+
play-cost =
    (
          <with SPACE>
        / (<((with | "for") SPACE)? "a" SPACE>)?
        / (
            (value <SPACE>)?
            (<((with | "for") SPACE)? "a" SPACE>)?
        )
        / <"whose total" SPACE>
    )?
    <"has a" SPACE>?
    (<("play" | "memory") SPACE>)? <#"costs?">
    (<SPACE> (<"of"> | <"is"> | <"are">))?
    (<SPACE> (value | sum))?
reduce-play-cost-by =
    (before <SPACE>)?
    (conditional <"," SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    (<#"(?i)Reduce"> | <#"(?i)Decrease">)
    <SPACE>
    (<"its"> / <"the"> / target)
    <(SPACE ("play" | "memory"))? SPACE "cost" SPACE> (conditional <SPACE>)?
    <"by" SPACE>?
    (<("of" | "to play") SPACE> target <SPACE "by" SPACE>)?
    value
    (<SPACE> conditional)?
reduce-digivolution-cost-by =
    (duration <SPACE>)?
    (before <SPACE>)?
    (conditional <"," SPACE>)?
    (<"reduce"> | <"decrease">)
    (
          <" the memory cost of the digivolution by ">
        | <" the digivolution cost by ">
    )
    value
    (<SPACE> duration)?
    (<SPACE> conditional)?
    (<"." SPACE> return)?
increase-digivolution-cost-by =
    (duration <SPACE>)?
    (before <SPACE>)?
    (conditional <"," SPACE>)?
    <"increase">
    (
          <" the memory cost of the digivolution by ">
        | <" the digivolution cost by ">
    )
    value
    (<SPACE> duration)?
    (<SPACE> conditional)?
    (<"." SPACE> return)?


(* DURATION *)
duration = during-turn | during-phase | end-of-battle

end-of-battle = <"At the "? #"end of( the)? battle" ","?>

(* DURING TURN *)
during-turn =
      current-turn
    | end-of-turn
    | end-of-your-next-turn
    | end-of-opponents-turn
    | end-of-opponents-next-turn
current-turn = ((<#"(?i)For the turn"> <",">?) | <"this turn">)
end-of-turn =
      <#"(?i)At( the)? end of( the)? turn" ","?>
    | <#"(?i)until the end of the turn">
end-of-your-next-turn = <#"(?i)until the end of your next turn">
end-of-opponents-turn =
    (<#"(?i)Until"> | <#"(?i)At">)
    <SPACE "the end of" SPACE>
    (<#"your opponent\'s"> | <"their">)
    <SPACE "turn">
end-of-opponents-next-turn = <#"(?i)until the end of (your opponent\'s|their) next turn">

(* DURING PHASE *)
during-phase =
    <#"(?i)during" SPACE>
    (
          main-phase
        | your-main-phase
        | your-unsuspend-phase
        | opponent-unsuspend-phase
        | opponent-next-unsuspend-phase
    )
main-phase =
    <"a main phase">
your-main-phase =
    <"your main phase">
your-unsuspend-phase =
    <"your unsuspend phase">
opponent-unsuspend-phase =
    <"their unsuspend phase">
opponent-next-unsuspend-phase =
    (<"its owner's"> | <"their"> | <"your opponent's">)
    <SPACE "next unsuspend phase">


(* PAY TO PLAY *)
<_pay_> =
      pay-to-play
    | pay-memory
    | pay-to-place
    | pay-to-treat
pay = <#"(?i)Pay(ing)?" SPACE> memory
pay-to-play =
    ((conditional | choose) <",">? <SPACE>)?
    (<"and" SPACE>? before <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    pay
    <("," | (SPACE "to")) SPACE> play
pay-to-place =
    ((conditional | choose) <",">? <SPACE>)?
    (<"and" SPACE>? before <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    pay
    <("," | (SPACE "to")) SPACE> place
pay-memory =
    ((conditional | choose) <",">? <SPACE>)?
    (<"and" SPACE>? before <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    pay
    <"." SPACE>
    if-do <"," SPACE> gain_lose
memory-paid = <"memory paid">
pay-to-treat =
    ((conditional | choose) <",">? <SPACE>)?
    (<"and" SPACE>? before <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    pay
    (<"," SPACE> duration)?
    <("," | (SPACE "to")) SPACE> treat-as


(* PLAY *)
play =
    (
        ((conditional | choose) <",">? <SPACE>)?
        (<"and" SPACE>? before <",">? <SPACE>)?
        (duration <",">? <SPACE>)?
        ((optional_mandatory | before) <SPACE>)?
    )?
    <"and" SPACE>?
    ((you | opponent | all-players) <SPACE>)?
    <#"(?i)(play(s|ing)?|us(es?|ing)?)" SPACE>
    ((target <SPACE "from" SPACE> zone) / target_and-or / target / (<" and ">? target)+ / target_or)
    (<SPACE> among-them)?
    <",">?
    (
        <SPACE>
        (
              <"as" SPACE ("a Tamer or" SPACE)? #"(an)?other" SPACE "Digimon">
            | zone
            | keyword-effect
        )
    )?
    (
          (<SPACE> without-paying-memory-cost <"." SPACE> token-attributes)
        | (
            <SPACE>
            (
                <" and ">?
                (
                      without-paying-memory-cost
                    | without-meeting-color-requirement
                    | without-meeting-color-requirement-or-paying-cost
                    | without-battling
                    | for-its-play-cost
                )
            )+
        )
        | (<"," SPACE> conditional <SPACE> reduce-play-cost-by)?
        | (<"," SPACE> (gain_lose | trash_delete | suspend_unsuspend | place))
    )?
    (<"." SPACE> trash_delete)?
    disallow-on-play-effects-for-played-cards?
    (<SPACE> instead)?
disallow-on-play-effects-for-played-cards =
    <". Any [On Play] effects on ">
    <"the ">?
    <#"(?i)Digimon|Tamer">
    <" played with this effect don't activate">
using-effect =
    (<"using"> | <"by">)
    <SPACE> (<"an"> | target) <SPACE>
    <#"effects?">
without-battling = <without SPACE "battling">
without-paying-memory-cost = <without SPACE #"payings?" SPACE> (<"its">|<"their">|<"the">) <SPACE> <"memory" SPACE>? <#"costs?">
without-paying-digivolve-cost = <without SPACE "paying" SPACE> (<"its">|<"their">|<"the">) <SPACE> <"digivolution" SPACE>? <#"costs?">
without-meeting-color-requirement = <without SPACE #"meeting (its|their) color requirements?">
without-meeting-color-requirement-or-paying-cost = <without-meeting-color-requirement SPACE "or paying its memory cost">
for-its-play-cost = <"for its" SPACE ("play" | "memory") SPACE "cost">


(* TRASH *)
<trash_delete> =
    (
          trash
        | trash-zone
        | trash-to-play
        | trash-to-place
        | trash-to-trash
        | trash-to-treat
        | trash-to-trigger
        | trash-to-reveal
        | trash-to-return
        | trash-to-keyword
        | trash-to-suspend
        | trash-to-unsuspend
        | trash-to-gain_lose
        | trash-to-disallow
        | trash-to-disallow-trash
        | trash-to-reduce-play-cost
        | trash-to-reduce-digivolution-cost
        | trash-to-set-play-cost
        | trash-to-add-trashed-field-value
        | deletes-in-battle
        | deleted-outside-battle
        | trash-else
        | trash-chosen
    )
<_trash_prelude_> =
    ((conditional | choose | duration) <",">? <SPACE>?)?
    (<"and" SPACE>? before <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    (target <SPACE>)?
    <#"(?i)(delet(e[sd]?|ing)?|trash(es|ing)?)" SPACE>
trash =
    _trash_prelude_
    (
        (
            (
                target
                / (<" and ">? target)+
            )
            (<SPACE> choose)?
            (<SPACE> conditional)?
        )
        | (zone | remaining_cards)
        | (value <SPACE "of" SPACE "them">)
    )
    (<SPACE> among-them)?
    (<SPACE> end-the-attack)?
    (<" and ">? (trash_delete | trigger))?
    (<"." SPACE> (amplify-effect | for-each | return | attack))?
    trash-those-digivolution-cards?
    (<SPACE> duration)?
    (<SPACE> instead)?
trash-those-digivolution-cards =
    <"." SPACE "Trash all of the digivolution cards of" SPACE>
    (<"that"> | <"those"> | <"the">)
    <SPACE "Digimon">
    <SPACE "you returned with this effect">?
trash-to-play = _trash_prelude_ target <("," | (SPACE "to")) SPACE> play
trash-to-place = _trash_prelude_ target <("," | (SPACE "to")) SPACE> place
trash-to-trash =
    _trash_prelude_
    (target / deleted-outside-battle)
    (
        (
            <("," | (SPACE "to")) SPACE>
            trash_delete
        )
        | (<"," SPACE>? trash_delete)+
    )
trash-to-treat =
    _trash_prelude_
    target
    <("," | (SPACE "to")) SPACE>
    treat-as
    (<SPACE> duration)?
trash-to-trigger =
    _trash_prelude_
    target
    <("," | (SPACE "to")) SPACE>
    trigger
    (<SPACE> duration)?
trash-to-reveal = _trash_prelude_ target <("," | (SPACE "to")) SPACE> reveal
trash-to-return = _trash_prelude_ target <("," | (SPACE "to")) SPACE> return
trash-to-keyword =
    _trash_prelude_
    target
    (
          <"," SPACE>
        | <("," | (SPACE "to")) SPACE>
    )
    keyword-effect
trash-to-suspend =
    _trash_prelude_
    target
    <("," | (SPACE "to")) SPACE>
    suspend
trash-to-unsuspend = _trash_prelude_ target <("," | (SPACE "to")) SPACE> unsuspend
trash-to-gain_lose = _trash_prelude_ target <("," | (SPACE "to")) SPACE ("have" SPACE)?> gain_lose
trash-to-disallow =
    _trash_prelude_
    target
    <("," | (SPACE "to")) SPACE>
    disallow
trash-to-disallow-trash =
    (
        _trash_prelude_
        (target <SPACE>)?
        <in-battle "," SPACE>
        trash
        <("," | (SPACE "to")) SPACE "prevent" SPACE>
        target
        <SPACE "from being deleted">
    ) | (
        _trash_prelude_
        target
        <SPACE "to">?
        <SPACE disallow-trash>
    )
trash-to-reduce-play-cost =
    _trash_prelude_
    target
    <("," | (SPACE "to")) SPACE>
    reduce-play-cost-by
trash-to-reduce-digivolution-cost =
    _trash_prelude_
    target
    <("," | (SPACE "to")) SPACE>
    reduce-digivolution-cost-by
trash-to-set-play-cost =
    _trash_prelude_
    target
    <("," | (SPACE "to")) SPACE>
    set-play-cost-to
trash-to-add-trashed-field-value =
    _trash_prelude_
    target
    <SPACE "to add" SPACE>
    target
    <("," | (SPACE "to")) SPACE> target
    (<SPACE> duration)?
trash-else =
    _trash_prelude_
    target
    <". If they don't, ">
    (trigger | gain_lose)
trash-chosen =
    choose+
    chosen-requirement
    <"." SPACE>
    <#"(?i)(delete[sd]?|trash(es|ing)?)" SPACE>
    target
chosen-requirement = target
trash-zone =
    _trash_prelude_
    zone
    (
          (<SPACE> (until-there-are | number-of-cards) (<";" SPACE> gain_lose)?)?
        | (<","? SPACE "and" SPACE>? _place_)?
    )
until-there-are =
    <"until" SPACE>
    (<"there are"> | <"they have">)
    <SPACE>
    value
    (<SPACE> number-of-cards)?
    <SPACE "cards">?
    <SPACE "left">?
deletes-in-battle =
    _trash_prelude_
    (target <SPACE>)?
    <in-battle SPACE?>
    survives?
    (<"," SPACE> (trash-zone | unsuspend))?
deleted-outside-battle =
    _trash_prelude_
    <outside-battle>
instead = <"instead">

trash-or-return =
    trash_delete <" or "> return


(* ACTIVATE *)
activate =
    ((conditional | choose) <",">? <SPACE>?)?
    (<"and" SPACE>? before <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    (target <SPACE>)?
    <#"(?i)Activates?" SPACE>
    (
          timing-effects-on
        | (
            (value <SPACE "of" SPACE>)?
            <"the" (SPACE "following")? SPACE #"effects?" (SPACE "below")?>
            (<SPACE> instead)?
            (<SPACE> twice)?
            (<":"> | <".">)?
            (<SPACE> conditional <".">)?
            (<SPACE>? (li / EFFECT))+
        ) | keyword-effect
    )
activate-again = <"activate it again">
twice = <"twice">
activate-n-effects =
    ((conditional | choose) <",">? <SPACE>?)?
    (<"and" SPACE>? before <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)Activate">
    <SPACE>
    value
    <SPACE>
    <"of the effects below">
    (
          (<"." SPACE> activate-all-effects-instead)
        | <(":" | ".")>
    )
    li+
activate-all-effects-instead =
    (conditional <",">? <SPACE>)
    <#"(?i)Activate">
    <SPACE "all" SPACE>
    <"of the effects below instead.">


(* END THE ATTACK *)
end-the-attack =
    <("to" SPACE)? "end the attack">


(* SUSPEND/UNSUSPEND *)
<suspend_unsuspend> =
      suspend-and-place-to-reduce-digivolution-cost
    / (
          suspend
        | suspend_or
        | unsuspend
        | suspend-to-activate
        | suspend-to-digivolve
        | suspend-to-play
        | suspend-to-reduce-play-cost
        | suspend-to-place
        | suspend-to-suspend
        | suspend-to-unsuspend
        | suspend-to-return
        | suspend-to-reveal
        | suspend-to-trash
        | suspend-to-trigger
        | suspend-and-disallow-unsuspend
        | suspend-to-hatch-or-move-target-to-battle-area
        | suspend-to-switch-attack-to
        | suspend-for-skill
        | unsuspend-and-suspend
    )
suspend-and-place-to-reduce-digivolution-cost =
    ((conditional | choose) <",">? <SPACE>)?
    (<"and" SPACE>? before <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    suspend
    <SPACE "and" SPACE> place
    <("," | (SPACE "to")) SPACE>
    reduce-digivolution-cost-by
suspend =
    ((conditional | choose) <",">? <SPACE>)?
    (<"and" SPACE>? before <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)Suspend(ing)?" SPACE>
    target
    (
        (
            <("," | (SPACE "to")) SPACE>
            (
                  (<"have" SPACE>? gain_lose (<", and have"> <SPACE> gain_lose)?)
                | reduce-digivolution-cost-by
                | attack
            )
        )
        | add
    )?
    (<"." SPACE> disable)?
    (<SPACE> instead)?
    (<SPACE> for-each)?
suspend_or = <#"(?i)suspend "> target <", or "> target
unsuspend =
    (conditional <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)Unsuspend" SPACE>
    target
    (
        <","? SPACE ("by" | "and") SPACE>
        (gain_lose | trash_delete | return | attack)
    )?
    (
        <"." SPACE "Then, it can attack your opponent's Digimon." SPACE>
        allow-attack-unsuspended
    )?
allow-attack-unsuspended = <"This effect allows you to attack unsuspended Digimon as well">
suspend-to-activate =
    (conditional <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)suspend(ing)?" SPACE> target
    (<("," | (SPACE "to")) SPACE>? activate)
suspend-to-digivolve =
    (conditional <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)suspend(ing)?" SPACE> target
    (<("," | (SPACE "to")) SPACE>? digivolve-into)
suspend-to-play =
    (conditional <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)suspend(ing)?" SPACE> target
    (<("," | (SPACE "to")) SPACE>? play)
suspend-to-reduce-play-cost =
    (conditional <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)suspend(ing)?" SPACE> target
    (<("," | (SPACE "to")) SPACE>? reduce-play-cost-by)
suspend-to-place =
    (conditional <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)suspend(ing)?" SPACE> target
    (<("," | (SPACE "to")) SPACE>? _place_)
suspend-to-suspend =
    (conditional <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)suspend(ing)?" SPACE> target
    (<("," | (SPACE "to")) SPACE>? suspend)
suspend-to-unsuspend =
    (conditional <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)suspend(ing)?" SPACE> target
    (<("," | (SPACE "to")) SPACE>? unsuspend)
suspend-to-return =
    (conditional <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)suspend(ing)?" SPACE> target
    (<("," | (SPACE ("to" | "and"))) SPACE>? return)
suspend-to-reveal =
    (conditional <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)suspend(ing)?" SPACE> target
    (<("," | (SPACE ("to" | "and"))) SPACE>? reveal)
suspend-to-trash =
    (conditional <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)suspend(ing)?" SPACE> target
    (<("," | (SPACE ("to" | "and"))) SPACE>? trash_delete)
suspend-to-trigger =
    (conditional <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)suspend(ing)?" SPACE> target
    (<("," | (SPACE ("to" | "and"))) SPACE>? trigger)
suspend-and-disallow-unsuspend =
    <#"(?i)suspend(ing)?" SPACE> target
    <"." SPACE> conditional <SPACE> target
    <SPACE "doesn't unsuspend" SPACE> duration
suspend-to-hatch-or-move-target-to-battle-area =
    conditional?
    <SPACE "you can suspend" SPACE>
    target
    <("," | (SPACE "to")) SPACE>
    hatch
    <", or move" SPACE>
    target
    <SPACE "from your breeding area to your battle area">
suspend-to-switch-attack-to =
    (conditional <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)suspend(ing)?" SPACE> target
    (<("," | (SPACE ("to" | "and"))) SPACE>? switch-attack-to)
suspend-for-skill =
    <"suspending" SPACE>
    card-type
    <SPACE "for a" SPACE>
    keyword-effect
    <SPACE "skill">
unsuspend-and-suspend = (unsuspend <" and "> suspend)


(* HATCH *)
hatch =
    ((conditional | duration) <",">? <SPACE>?)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)Hatch" SPACE>
    target
    <SPACE "to an empty space" SPACE zone>

(* RETURN *)
<_return_> = (
          return
        | return-to-return
        | return-to-trash
        | return-to-reduce-digivolution-cost
    )
return =
    ((conditional | duration) <",">? <SPACE>?)?
    (<"and" SPACE>? before <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <(you | opponent) SPACE>?
    <#"(?i)return(ing)?" SPACE>
    target
    (<SPACE> other-than)?
    (<SPACE> zone)?
    (<("," | (SPACE "to")) SPACE> zone)?
    (<SPACE> order)?
    <"," SPACE>?
    (trash_delete | disallow)?
    (<((SPACE "to") | ";") SPACE> gain_lose)?
    <"." SPACE PARENTHESES>?
    return?
    (<"." SPACE> trash)?
    trash-those-digivolution-cards?
    (<("." | ", and") SPACE> for-each)?
    (<SPACE> instead)?
return-to-return =
    (conditional <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)return(ing)?" SPACE> target
    (<("," | (SPACE ("to" | "and"))) SPACE>? return)
return-to-trash =
    (conditional <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)return(ing)?" SPACE> target
    (<("," | (SPACE ("to" | "and"))) SPACE>? trash_delete)
return-to-reduce-digivolution-cost =
    (conditional <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)return(ing)?" SPACE> target
    (<("," | (SPACE ("to" | "and"))) SPACE>? reduce-digivolution-cost-by)



(* ADD TO HAND *)
<_add_> = add | draw-card
add =
    (duration <"," SPACE>)?
    (conditional <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    (
        <", and ">?
        (target <SPACE>)?
        <#"(?i)Adds?" SPACE>
        (value <SPACE>)?
        (target_and-or / target / (<" and ">? target)+ / target_or)
        <SPACE>
        (among-them <SPACE>)?
        <"to" SPACE>?
        zone
        <("." SPACE PARENTHESES)>?
    )
    (
        <("," | (SPACE "to")) SPACE>
        (
              trigger
            | (
                suspend_unsuspend
                (<" and have "> gain_lose)?
            )
        )
    )?
    (<SPACE> shuffle)?
    (<","? SPACE> conditional)?
draw-card =
    target <SPACE "draw" SPACE> zone


(* TRIGGER *)
trigger =
    (duration <"," SPACE>)?
    choose?
    (before <"," SPACE>)?
    ((conditional | duration) <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)Trigger" SPACE>?
    keyword-effect
    (<SPACE "on" SPACE> target)?
    (<SPACE> until-there-are)?
    (<".">? <SPACE> PARENTHESES)?
    (
        <SPACE>
        (
              play
            / trash_delete
            / (
                conditional
                <("." SPACE PARENTHESES)>?
            )
        )
    )?
    (<SPACE "and" SPACE> gain_lose)?


(* REVEAL *)
reveal =
    (conditional <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    (<#"(?i)Reveal(ing)?"> | <#"(?i)Look at">) <SPACE> target
    (
        (
              <","? " and" SPACE>
            / <"," SPACE>
        )?
        (_place_ | trash_delete)
    )?
    (
        (<SPACE> for-each)?
        <"." SPACE?>
        (play <"." SPACE?>)?
        (
            (_place_ <"." SPACE?>)?
            add
            (
                  <"." SPACE?>
                | <", and" SPACE?>
            )
        )?
        (add-or-place <"." SPACE?>)?
        (gain_lose <"." SPACE?>)?
        (trash_delete <"." SPACE?>)?
        (digivolve-into)?
        (<"," SPACE>? (otherwise | _place_))?
        (<"." SPACE> suspend_unsuspend)?
    )?
add-or-place = add <SPACE "or" SPACE> _place_
look-at =
    <#"(?i)look at" SPACE>
    zone
    (
        (
            (
                <"," SPACE then>
                <SPACE> reveal
                <SPACE "in it and" SPACE>
            ) | (
                <"." SPACE>
            )
        )
        add
        (<"." SPACE> trigger)?
        (<SPACE> shuffle)?
    )?


(* OTHERWISE *)
otherwise = <SPACE? "Otherwise" ","? SPACE> _place_


(* PLACE *)
<_place_> =
      place
    | place-to-trash
    | place-to-trigger
    | place-to-reveal
    | place-to-gain
    | place-to-play
    | place-to-disallow
    | place-to-digivolve-into
    | place-to-unsuspend
    | place-to-switch-attack-to
place =
      (target <SPACE "place" SPACE> target)
    | (
        ((conditional | choose) <",">? <SPACE>)?
        (<"and" SPACE>? before <",">? <SPACE>)?
        (optional_mandatory <",">? <SPACE>)?
        <("."? SPACE)>?
        <#"(?i)By" SPACE>?
        <#"(?i)plac(es?|ing)" SPACE>
        (target / target_and-or)
        (<SPACE> among-them)?
        (
            <SPACE>
            (
                (zone <","? SPACE> zone)
                / zone
                / location
            )
            (<SPACE> order)?
        )?
        (<SPACE> instead-of-in-the-trash)?
        (<SPACE> digivolution-cards-for-a-digixros)?
        ((<"."> | <",">) <SPACE> trigger)?
        trash-those-digivolution-cards?
        (<SPACE> instead)?
    )
play-or-place = play <" or "> place
instead-of-in-the-trash = <"instead of placing it in your trash">
place-to-trash = place (<","> | <("," | (SPACE "to"))>) <SPACE> trash
place-to-trigger = place (<","> | <("," | (SPACE "to"))>) <SPACE> trigger
place-to-reveal = place <"," SPACE> reveal
place-to-gain = place (<","> | <("," | (SPACE "to")) (SPACE "have")?>) <SPACE> gain_lose
place-to-play = place (<","> | <("," | (SPACE "to"))>) <SPACE> play
place-to-disallow = place (<","> | <("," | (SPACE "to"))>) <SPACE> disallow
place-to-digivolve-into = place (<","> | <("," | (SPACE "to"))>) <SPACE> digivolve-into
place-to-unsuspend = place (<","> | <("," | (SPACE "to"))>) <SPACE> unsuspend
place-to-switch-attack-to = place (<","> | <("," | (SPACE "to"))>) <SPACE> switch-attack-to

order = order_any
order_any = <"in any order">


(* LIST ITEM *)
<li> = <("・" | "*")> EFFECT


(* SEARCH *)
search =
    (conditional <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)search">
    <SPACE> zone
    (<SPACE "for" SPACE> target)?
    (<"," SPACE> reveal)?
    (<","? " and "> (play | add))


(* SHUFFLE *)
shuffle =
    (target <SPACE>)?
    <#"(?i)shuffles?">
    <SPACE> zone


(* ALSO TREAT AS *)
treat-as =
    (
        (
              <#"(?i)Also treat(ed)? as" SPACE>
            | <SPACE "as if the" SPACE card-type SPACE "is a" SPACE>
        )
        (treat-as-name | treat-as-traits | color | level)+ (<SPACE> card-type)?
    )
    / (<#"(?i)Treat(ed)?" SPACE "as also" SPACE ("having the" SPACE)?> same-field)
    / (<#"(?i)Treat(ed)?" SPACE> target <SPACE "as also" SPACE> same-field)
    / target <SPACE "is also treated as" SPACE> target
    / mention <SPACE "can treat" SPACE> target <SPACE "as" SPACE> level <SPACE> for-dna-digivolution
    / treat-as-name
treat-as-name =
    (conditional <",">? <SPACE>)?
    (before <",">? <SPACE>)?
    (
          <(SPACE "and" | "if") (SPACE "its")? SPACE "name is" SPACE>
        | <#"(?i)The" SPACE "name of" SPACE> target <SPACE "is also treated as" SPACE>
        | <#"(?i)Treat" SPACE> target <SPACE "as if it also has" SPACE>
        | target <SPACE "is also treated as having" SPACE>
    )
    mention
treat-as-traits =
    (
        <(SPACE "and" SPACE)? "traits include" SPACE> mention
    ) | (
        <"having the" SPACE> mention <SPACE "trait">
    )


(* ATTACK *)
attack =
    (
        (conditional <",">? <SPACE>)?
        target
        <SPACE>
        (optional_mandatory <",">? <SPACE>)?
        <#"(?i)attacks?" SPACE>
        target?
        PARENTHESES?
    ) / (
        (conditional <",">? <SPACE>)?
        (duration <",">? <SPACE>)?
        (
            (
                target
                <SPACE>
                (optional_mandatory <",">? <SPACE>)?
                <#"(?i)attacks?" SPACE>
                (PARENTHESES <"," SPACE>)?
            ) / (
                (optional_mandatory <",">? <SPACE>)?
                <#"(?i)attacks?" SPACE>
                (PARENTHESES <"," SPACE>)?
            ) / (
                <#"(?i)attacking" SPACE>
            )
        )
        (suspend_unsuspend / target)
        (<SPACE> duration)?
    ) / (
        (conditional <",">? <SPACE>)?
        (optional_mandatory <",">? <SPACE>)?
        <#"(?i)attacks?" SPACE>
        (target <SPACE>)?
        with_without <SPACE>
        target
        (<SPACE> without-suspending)?
    )
without-suspending = <"without suspending it">


(* TARGET *)
target =
    (
        (
              itself
            | chosen
            | owner
            | player
            | players
            | all-players
            | either-player
            | remaining_cards
            | target-effect
            | security-stack
        )
        / target-if-has-name
        / moves-between
        / digivolution-cards-include
        / (<","? SPACE? "and "?>? mention)+
        / card-type
        / (opponent / you)
        / zone
        / number-of-cards
        / that
        / revealed-cards
    )
    (<SPACE> except-target)?
target-if-has-name =
    target
    <SPACE "if" SPACE target SPACE "has" SPACE>
    in-name
target_and-or = target <SPACE and-or SPACE> target
and-or = <"and/or">
target_or = target <","? " or "> target
itself = <#"(?i)This"> (<SPACE> (<"one"> | card-type))?
that =
    (
        (value <SPACE>)?
        <"of" SPACE>?
        (
              (<#"(?i)That|Those" SPACE> card-type)
            / (<#"(?i)The" SPACE> card-type <SPACE "that" SPACE> state)
            / <#"(?i)Its?">
            / (<"the played" SPACE> card-type)
            / (<"the" SPACE> card-type)
        )
    )
    | (
        (value <SPACE>)
        <"of" SPACE "them" SPACE>
        card-type
    )
    | (<#"(?i)They"> | <"them">)
revealed-cards =
    (
          <"the revealed cards">
        | (<"all of the revealed" SPACE> card-type)
    )
chosen =
    (value <SPACE "of" SPACE>)?
    <#"(?i)The" SPACE>?
    <"chosen">
    <SPACE>
    card-type
you =
    (value <SPACE>)?
    <"of" SPACE>?
    (
          ((card-type <SPACE>)? <#"(?i)you(\'ve)?">)
        | (
            (
                <#"(?i)Your">
                (<SPACE> other)?
                (<SPACE> (<" and ">? card-type)+)?
            ) / (
                <#"(?i)Your">
                (<SPACE> other)?
                (<SPACE> zone)?
            )
        )
    )
    ((<SPACE> does-not)? <SPACE> (<"have"> | <"has">))?
    (
        <SPACE>
        (value <SPACE>)?
        (number-of-cards | state | level | card-type)
    )?
    (<SPACE> target-effect)?
    (<SPACE> duration)?
other = <"other">
other-than = <#"(?i)Other" SPACE "than" SPACE> target <",">?
opponent =
    (value <SPACE>)?
    <"of" SPACE>?
    (state <SPACE>)?
    (<#"(?i)(your |an )?opponent(\'s)?"> / <#"(?i)They">)
    (<SPACE> other)?
    (<SPACE> zone)?
    ((<SPACE> does-not)? <SPACE> (<"have"> | <"has">))?
    (
        <SPACE>
        (value <SPACE>)?
        (number-of-cards | state | level)
    )?
    (<SPACE> target-effect)?
    (
        <SPACE>
        (card-type / (card-type <" and "> card-type))
    )?
    (<SPACE> (keyword-effect | DP))?
    (<SPACE> duration)?
owner =
      <"its owner's">
    | <"their" SPACE #"owner\'?s\'?">
    | (
        (value <SPACE>)?
        <"of" SPACE>?
        <#"(?i)their">
        (<SPACE> card-type)?
    )
player = <"a" SPACE>? <#"(?i)player">
players = <"a" SPACE>? <#"(?i)player\'?s\'?">
all-players =
    (value <SPACE "of" SPACE>)?
    (
          (
            <#"(?i)Both" SPACE #"(?i)player\'?s\'?">
            (<SPACE> (zone | card-type))?
        )
        | <"you or your opponent">
        | <#"(?i)All" SPACE "players">
        | <#"(?i)Each" SPACE "player's">
    )
    (<(SPACE "has")? SPACE> card-type)?
either-player =
    <#"(?i)Either" SPACE "player">
    (<SPACE "has" SPACE> card-type)?
card-type =
    mention / (
        <"another" SPACE>?
        (<#"(?i)The" SPACE> field <SPACE "of" SPACE> value <SPACE>)?
        (state <SPACE>)?
        (mention <SPACE>)?
        (same-field <SPACE>)?
        (different-color <SPACE>)?
        (
              card-type_and
            / _card-types_
            / any_card-type
            / zone
            / target
            / card-type_and-or
        
        )
        (<SPACE> with-digixros-requirement)?
        (<SPACE> target-effect)?
        (
            <SPACE "is" SPACE>?
            treat-as
        )?
        (<SPACE> (field / zone / (field <SPACE> zone)))?
        (<SPACE> (is-named / mention / has-attribute))*
        (<SPACE> same-field)?
        (<SPACE> using-effect)?
        (<SPACE> <"that" SPACE>? state)?
        (<SPACE> this-way)?
        (<SPACE> placed)?
    )
    / (level <SPACE> color)
    / (color (<SPACE "and" SPACE> play-cost)?)
    / (card-type-or (<SPACE> (is-named / mention / has-attribute)))
    / card-type-or
<_card-types_> =
    (
          digi-egg_card-type
        | digimon_card-type
        | (security_digimon_card-type / security_card-type)
        | tamer_card-type
        | option_card-type
    )
card-type_and = _card-types_ <" and "> _card-types_ (<SPACE> both-with)?
card-type_and-or =
    card-type
    <SPACE and-or SPACE>
    card-type
    (
        <SPACE>
        <"whose" SPACE>?
        (
              field
            / (
                field
                (<SPACE> (value | (LTE | GTE)))
            )
            / sum
        )
    )?
with-digixros-requirement = <with SPACE ("a" SPACE)? "DigiXros" SPACE #"requirements?">
placed = <"placed">
card-type-or =
    (
          (mention <SPACE "or that's" SPACE> card-type)
        / ((value <SPACE>)? card-type <" or "> card-type)
    )
this-way = <"you" SPACE> (this-way_suspend | this-way_return) <SPACE "this way">
this-way_suspend = <"suspend">
this-way_return = <"return">
has-attribute =
    (
        (<#"(that )?has"> | <"that's"> | with_without)
        <SPACE>
        ((color | level | keyword-effect | field) / mention / card-type-or)
    )
same-name = <"that share a name with it">
same-level = <"same-level">
same-field =
    (
        (<with> | <"of">) <SPACE "the" SPACE ("same" SPACE)?> field (<SPACE ("as" | "of") SPACE> target)?
    )
    | (<with SPACE ("matching" | "an") SPACE> field)
    | (<"having the" SPACE> field <SPACE "of" SPACE> (zone / target))
    | same-name
    | same-level
remaining_cards =
      <"the remaining" SPACE #"cards?">
    | <"the rest">
    | <"all of their other" SPACE> target
field =
    (
        <(with | "have") SPACE>?
        ((MIN | MAX) <SPACE>)?
        (
              field_name
            | field_level
            | field_color
            | field_digivolve-cost
            | play-cost
            | field_DP
            | field_inherited-effect
            | same-field
        )
    ) / field-or
field-or = field <", or" SPACE> field
field_name = <"and" SPACE>? (original <SPACE>)? <#"names?"> (<SPACE "of" SPACE> mention)?
field_level = <"and" SPACE>? (original <SPACE>)? <#"levels?"> (<SPACE "is" SPACE> value)?
field_color = <"and" SPACE>? (original <SPACE>)? (value <(SPACE | "-")>)? <#"colors?"> (<SPACE> in-digivolution-cards)?
field_digivolve-cost = <"that can digivolve for a digivolution cost of" SPACE> value
in-digivolution-cards = <"in" SPACE> target
field_DP = <"and" SPACE>? (original <SPACE>)? (<"DP"> | DP-based)
field_inherited-effect = <"and" SPACE>? (original <SPACE>)? <"inherited effect">
original = <"an" SPACE>? <"original">

any_card-type =
    (
        (
            (value <SPACE>)?
            (field <SPACE>)?
            ((color | level) <SPACE>?)*
            <#"card(\'?s\'?)?">
            (<SPACE> field)?
            (<SPACE> zone)?
            (<SPACE ("is" | (("that" SPACE)? "are" (SPACE "either")?)) SPACE> color)?
            (<SPACE> mention)?
        ) / (
            (value <SPACE>)
            (field <SPACE>)?
            ((color | level) <SPACE>?)+
        ) / (
            ((color | level) <SPACE>)+
            mention
        ) / (
            value <SPACE> field
        )
    )
digimon_card-type =
    (value <SPACE> (other <SPACE>)?)?
    (field <SPACE>)?
    ((color | level | DP) <SPACE>)*
    <"card is a" SPACE>?
    <#"(?i)Card" "/">?
    <#"(?i)Digimon(\'s)?">
    <SPACE #"card(\'?s)?">?
    (<SPACE> sum)?
    (<SPACE> mention)?
    <SPACE>?
    (
        (
            (
                <SPACE with (SPACE "a")? SPACE>
                |
                <(SPACE "that")? SPACE "has" SPACE>
            )?
            digimon-has
            (<SPACE> among-them)?
        ) / (
            <SPACE with>? <SPACE> zone
        )
    )?
    (
        <SPACE> (
              (
                state
                (<SPACE> state <SPACE "and" SPACE> state)?
            )
            | different-name
        )
    )?
    (
        <SPACE>
        <"whose" SPACE>?
        (
              field
            / (
                field
                (<SPACE> (value | (LTE | GTE)))
            )
        )
    )?
    (<SPACE> (<SPACE? "and ">? (keyword-effect | DP))+)?
<digimon-has> =
    (with <SPACE>)?
    ((DP | level | (different-name / mention) | keyword-effect | timing-effects | in-text) / digimon-has-or)
digimon-has-or = (<" or ">? digimon-has)+

security_digimon_card-type = <#"(?i)Security Digimon"> <SPACE "card">?
security_card-type = (value <SPACE>)? <#"(?i)Security cards?"> (<SPACE> (LTE | GTE))?
digi-egg_card-type = (value <SPACE>)? non? <#"(?i)Digi-Eggs?"> <SPACE #"cards?">?
tamer_card-type =
    (value <SPACE>)?
    (field <SPACE>)?
    ((color | level) <SPACE>)*
    <#"(?i)Card" "/">?
    <#"(?i)Tamers?">
    <SPACE #"cards?">?
    (<SPACE> play-cost)?
option_card-type =
    (value <SPACE>)?
    (field <SPACE>)?
    ((color | level) <SPACE>)*
    <#"(?i)Options?"> <SPACE #"cards?">?
    (<SPACE> card-type-or)?
    (<SPACE> play-cost)?


(* ZONES *)
zone =
    (
        <"from" SPACE>?
        (location <SPACE>)?
        (
            (<target SPACE> zone_and-or)
            / zone_or
            / (
                zones
                <SPACE "on">?
            ) / (
                (zones <SPACE>)?
                (value <SPACE>)?
                <(#"cards?" SPACE)? ("from" | "of" | "in" | "to") SPACE>?
                (location <SPACE>)?
                (
                    (zone_or / zones)
                    /
                    ((target <SPACE>) (zone_or / zones))
                    /
                    ((zone_or / zones) (<SPACE> target))
                )
            )
        )
    )
<zones> =
    (
          zone_deck
        | zone_digi-egg-deck
        | zone_hand
        | zone_trash
        | zone_security
        | zone_breeding-area
        | zone_battle-area
    )
    / zone_digivolution-cards
    / zone_that
zone_or = zones <","? SPACE "or" SPACE ("from" SPACE)?> zones
zone_and-or = zones <SPACE and-or SPACE> zones
zone_that = <"it">
zone_deck =
    (value <SPACE>)?
    <#"cards?" SPACE>?
    <("in" | "of") SPACE>?
    (target <SPACE>)?
    <#"decks?">
zone_digi-egg-deck =
    (value <SPACE>)?
    <#"cards?" SPACE>?
    <("in" | "of") SPACE>?
    (target <SPACE>)?
    <"Digi-Egg deck">
zone_hand =
    (value <SPACE>)?
    <#"cards?" SPACE>?
    <("in" | "of") SPACE>?
    (target <SPACE>)?
    <#"hands?">
zone_trash =
    (value <SPACE>)?
    <#"cards?" SPACE>?
    <"is" SPACE>?
    <("in" | "of") SPACE>?
    ((<" and ">? target)+ <SPACE>)?
    <(#"(?i)Trash(es)?" | "recycle bin")>
zone_security =
    (value <SPACE>)?
    <#"cards?" SPACE>?
    <("in" | "of") SPACE>?
    ((location <SPACE>)? target <SPACE>)?
    <"security" (SPACE (#"stacks?" | "cards"))?>
    <SPACE "face down">?
    (<SPACE> (LTE | GTE))?
zone_breeding-area =
    (value <SPACE>)?
    <#"cards?" SPACE>?
    <("in" | "of") SPACE>?
    (target <SPACE>)?
    <(#"(?i)Breeding" | #"(?i)Raising") SPACE #"(?i)Area">
zone_battle-area =
    (value <SPACE>)?
    <#"cards?" SPACE>?
    <"is" SPACE>?
    <("in" | "of") SPACE>?
    (target <SPACE>)?
    (<#"(?i)battle area"> / <"in play">)
zone_digivolution-cards =
    (
        ((order <SPACE>)? <"as" SPACE ("one of" SPACE)? "its" SPACE>? (location <SPACE>)?)?
        (<"from" SPACE> target <SPACE>)?
        (<"that" SPACE>? <"has" SPACE>? value <SPACE>)?
        (<"in" SPACE> target <SPACE>)?
        (target <SPACE>)?
        (level <SPACE>)?
        <("had" | "the") SPACE>?
        <#"(?i)digivol(ve|ving|ution) card(s)?">
        (<SPACE> field)?
        (<SPACE> among-them)?
        (<SPACE> location <SPACE> target)?
        (<SPACE "of" SPACE> target)?
    )
    / (<"the" SPACE> location <SPACE "card" SPACE "of" SPACE> target)
    / (<"as a digivolution card" SPACE>? location_anywhere <SPACE> target)
moves-from =
    target
    <SPACE #"move[sd]?" SPACE>
    target
    <SPACE "from" SPACE>
    zone
moves-between =
    target
    <SPACE "is">?
    <SPACE (#"move[sd]?" | "placed") SPACE "from" SPACE (("the" | "their") SPACE)?>
    zone <("," | (SPACE ("to" | "at"))) SPACE> zone

number-of-cards =
    (
        <"the" (SPACE "total")? SPACE "number of cards in" SPACE>
        zone
        (
              (<SPACE> (LTE | GTE))
            | (<("," | (SPACE "to")) SPACE> value)
            | (<SPACE "is" SPACE> value)
        )?
    )
    | (
        <"cards in" SPACE> zone
    )
    | (
        <"equal to the number of cards" SPACE> added-to
    )
fewer-security-cards-than-opponent = target <SPACE "have fewer security cards than your opponent">
more-security-cards-than-opponent = target <SPACE "have more security cards than your opponent">

digivolution-cards-include =
    (
        target <SPACE>
        (<"the" SPACE>)?
        <#"(?i)digivol(ve|ving|ution)" SPACE #"card(s)?">
        <SPACE "include" SPACE>
        target
    ) | (
        target <SPACE>
        (<("is" SPACE)? "in" SPACE>)?
        target <SPACE>
        <#"(?i)digivol(ve|ving|ution)" SPACE #"card(s)?">
    ) | (
        target <SPACE>
        <"has" SPACE>?
        target <SPACE>
        <"in its" SPACE>?
        <#"(?i)digivol(ve|ving|ution)" SPACE #"card(s)?">
    ) | (
        target
        <SPACE with SPACE>
        target
        <SPACE>
        <#"(?i)digivol(ve|ving|ution)" SPACE #"card(s)?">
    )


(* CHOOSE *)
choose =
    (conditional <"," SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    (target <SPACE>)?
    ((<#"(?i)Chooses?"> | <#"(?i)Among">) <SPACE>)
    target
    conditional?
    (<(SPACE "and" | "." SPACE)> <SPACE>?)?
disable =
    (conditional <"," SPACE>)?
    (duration <",">? <SPACE>)?
    (other-than <",">? <SPACE>)?
    (
        (
            target <SPACE>
            (
                (field <SPACE>)?
                (<can-not> | <"doesn't"> | <"don't">)
            )
            (
                (<SPACE "or">? <SPACE> (<"be"> | <"have">))?
                (<SPACE> (state | gain_lose | dp-reduced | reduced | returned-to | unsuspend) (<SPACE> target)?)?
                (<SPACE "be" SPACE> state)?
            )+
        ) | (
            (* None of target can... *)
            disable-all-targets <SPACE>
            (
                (field <SPACE>)?
                <"can">
            )
            (
                (<SPACE "or">? <SPACE> (<"be"> | <"have">))?
                (<SPACE> (state | gain_lose | dp-reduced | reduced | returned-to | unsuspend) (<SPACE> target)?)?
                (<SPACE "be" SPACE> state)?
            )+
        )
    )
    <SPACE "or">?
    (<SPACE> target-effect)?
    (<SPACE> state)?
    (<SPACE> duration)?
    (<","? SPACE "and" SPACE> disallow-target-effects)?
disable-all-targets = <ZERO SPACE "of" SPACE> target
reduced = <"reduced">
except = <"except"> | <"other than">
except-target = <except SPACE> (target (<" and "> target)?)
only = <"only">
amplify-effect =
    (conditional <"," SPACE>)?
    (
        (
            <#"(?i)Add" SPACE>
            (value | DP)
            <SPACE>
            (
                  <"to the number of cards">
                | (<"to the" SPACE #"max(imum)?" SPACE> field <SPACE "of the" SPACE target>? <SPACE "you can choose with">)
                | (<"to the" SPACE #"max(imum)?" SPACE> field <SPACE "of the card you can play by">)
                | (<"to the" SPACE #"max(imum)?" SPACE> field <SPACE "of the Digimon you can delete with">)
                | (<"to the" SPACE #"max(imum)?" SPACE "this" SPACE> field)
                | (<"to the" SPACE> field <SPACE "of the Digimon">? <SPACE "you can select with">)
            )
            <SPACE>
            target-effect <SPACE "can delete">?
            (<SPACE> for-each)?
        ) | (
            <#"(?i)It" SPACE "gets" SPACE>
            (value | DP)
            <SPACE "to the" SPACE #"max(imum)?" SPACE> field <SPACE> target-effect
        )
    )
target-effect =
    (
        (
            (except <SPACE>)?
            (state <SPACE>)?
            <(("by" (SPACE "the")?) | with) SPACE>?
            (
                  ((target | keyword-effect) <SPACE #"effects?">)
                | any-effect
            )
        )
        | (value <SPACE #"effects?" SPACE "of" SPACE> target)
        | any-effect
        | DP-based <SPACE> state <SPACE #"effects?">
        | digixrosing
        | (state <SPACE #"effects?">)
    )
    (<SPACE> duration)?
replace-digixros-requirement-with =
    (conditional <"," SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <"use" SPACE>
    target
    <SPACE "in place of one of the DigiXros requirements">
DP-based = <"DP-based">
any-effect = <("an" SPACE)? #"(?i)Effects?"> (<SPACE> state)?
dp-reduced = <"its DP reduced">
returned-to =
    (can-not <SPACE "be" SPACE>)?
    <"returned to" SPACE ("its owner's" SPACE)?> zone

in-battle = <"in battle">
outside-battle = <"outside of a battle">

(* SECURTIY STACK *)
(* NOTE: Attacking a player is also the same as attacking security *)
security-stack = value <SPACE> location <SPACE> <"of" SPACE> target <SPACE> <"security stack">
any-security-stack-decremented = <"a card is removed from a player's security stack">

<disallow> =
      disallow-play
    | disallow-play-by-effect
    | (
          disallow-attack-and-block
        / disallow-attack-and-activation
        / disallow-attack
    )
    | disallow-target-effects
    | disallow-block
    | disallow-effect-to-reduce
    | disallow-effect-to-trash-or-reduce-dp
    | disallow-effect-to-return-or-reduce-dp
    | disallow-reduce-play-cost
    | disallow-reduce-digivolution-cost
    | disallow-activation
    | disallow-trash
    | disallow-trash-by-effect
    | disallow-trash-or-return
    | disallow-unsuspend
    | disallow-digivolve-to-level-and-delete
    | disallow-all-unsuspend
    | disallow-leaving-play
    | disallow-leaving-play-by-trashing
    | disallow-increase-number-of-cards
    | disallow-timing-effect
    | disallow-all-players-digimon-deletion-in-battle
can-not = <#"(?i)can't">
disallow-play =
    ((conditional | choose) <",">? <SPACE>)?
    target
    <SPACE can-not SPACE ("play" | "use") SPACE>
    target
    (<SPACE> duration)?
disallow-play-by-effect =
    target
    <SPACE can-not SPACE ("play" | "use") SPACE>
    target
    (<SPACE "by" SPACE> target-effect)
    (<SPACE> duration)?
disallow-trash-by-effect =
    <can-not SPACE "be deleted by" SPACE>
    target-effect
    (<SPACE> duration)?
disallow-attack =
    (duration <"," SPACE>)?
    (target <SPACE>)?
    <can-not SPACE "attack">
    (<SPACE> target)?
    (<SPACE "and" SPACE> disallow-target-effects)?
disallow-target-effects = (target <SPACE>)? <"isn't affected" SPACE> target-effect
disallow-block =
    (duration <"," SPACE>)?
    (
        (   (target <SPACE>)?
            <can-not SPACE "be blocked by" SPACE>
            target
        ) | (
            target <SPACE can-not SPACE "be blocked">
        )
    )
    (<SPACE> duration)?
disallow-unsuspend =
    (conditional <"," SPACE>)?
    (
        target
        <SPACE "don't unsuspend">
        (<SPACE> duration)?
    )
disallow-digivolve-to-level-and-delete =
    (conditional <"," SPACE>)?
    (
        target
        <SPACE can-not SPACE "digivolve to" SPACE> level
        (<"," SPACE "and" SPACE> trash_delete)
    )
disallow-all-unsuspend =
    (
        duration <"," SPACE>
        <"none of" SPACE>
        target
        <SPACE "can unsuspend">
    )
disallow-attack-and-block =
    (
        choose?
        target
        <SPACE can-not SPACE "attack or block" SPACE>
        (target | duration)
    )
    |
    (
        duration <"," SPACE>
        target
        <SPACE can-not SPACE "attack or block">
    )
disallow-attack-and-activation =
    target
    <SPACE>
    disallow-attack
    <SPACE "and" SPACE>
    disallow-activation
disallow-effect-to-reduce = target-effect <SPACE> <can-not SPACE "reduce" SPACE> target
disallow-effect-to-trash-or-reduce-dp =
    <"prevent" SPACE>
    target-effect
    <SPACE "from deleting it or reducing its DP" SPACE> duration
disallow-effect-to-return-or-reduce-dp =
    target-effect
    <SPACE can-not SPACE "return them to hands or decks or reduce their DP">
disallow-reduce-play-cost = target <SPACE> <can-not SPACE "reduce play" SPACE #"costs?">
disallow-reduce-digivolution-cost = target <SPACE> <can-not SPACE "reduce digivolution" SPACE #"costs?">
disallow-activation =
    (conditional <"," SPACE>)?
    (
        target
        <SPACE ("doesn't" | "don't") SPACE "activate" SPACE>
        timing-effects-on
    ) | (
        timing-effects-on
        <SPACE ("doesn't" | "don't") SPACE "activate">
    ) | (
        (target <SPACE>)?
        <can-not SPACE "activate" SPACE>
        timing-effects
    ) | (
        (value <SPACE "of" SPACE>)?
        timing-effects-on
        <SPACE "can activate" SPACE>
        duration
    )
disallow-trash =
    (
          <"prevent that deletion">
        | <"prevent" SPACE> target <SPACE "from being deleted">
    )
disallow-trash-or-return =
    target
    <SPACE can-not SPACE "delete" SPACE>
    target <" or "> return
    <SPACE> duration
disallow-leaving-play =
    <#"(?i)Prevent" SPACE> (<"it"> / target)
    <SPACE "from leaving play">
disallow-leaving-play-by-trashing =
    (before <"," SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    <#"(?i)Prevent" SPACE "it">
    <SPACE "from leaving play by" SPACE>
    trash_delete
disallow-increase-number-of-cards =
    target
    <SPACE can-not SPACE "increase" SPACE>
    number-of-cards
disallow-timing-effect =
    <#"(?i)Any" SPACE>?
    timing-effects
    <SPACE "on" SPACE>
    target
    <SPACE "don't activate">
disallow-all-players-digimon-deletion-in-battle =
    <"Neither player's Digimon can be deleted" SPACE> in-battle
    (<SPACE> duration)?




if-do = <#"(?i)If" SPACE> target <SPACE "do"> <",">?
if-do-not = <#"(?i)If" SPACE> target <SPACE> (<"don't"> | <"do not">) <",">?
then = <#"(?i)Then,?"> | <#"(?i)When you do,?">
conditional =
    (
        (
            (
                    (
                        (
                            (<#"(?i)When"> | <#"(?i)While"> | <#"(?i)If">)
                            <SPACE "there's">?
                            (
                                  (<SPACE> (<"there are"> | <"there're">))
                                | <SPACE "it's a">
                            )?
                        ) | (if-do | if-do-not)
                    )
                    <SPACE>
            )
            (
                (
                    (
                          _add_
                        / added
                        / attack-switched
                        / play
                        / played-from
                        / place
                        / play-or-place
                        / return
                        / activate
                        / activate-n-effects
                        / activate-that-timing-effect-on
                        / attack
                        / gain_lose
                        / player-turn
                        / dna-digivolving
                        / digixrosing
                        / any-security-stack-decremented
                        / digivolve-into
                        / suspend_unsuspend
                        / digivolution-cards-include
                        / moves-between
                        / moves-from
                        / number-of-cards
                        / trash_delete
                        / keyword-effect
                        / (target / (target <SPACE "and" SPACE> target))
                        / target_or
                        / (
                              fewer-security-cards-than-opponent
                            | more-security-cards-than-opponent
                        )
                    )
                    <","? SPACE?>
                ) / (
                    (target / target_or) <SPACE>
                    (
                          add
                        | level
                        | trash_delete
                        | play-cost
                        | memory
                        | keyword-effect
                    )
                    <","? SPACE?>
                )
            )
            <"," SPACE>?
            (instead <SPACE>)?
        )
        / (conditional <"." SPACE> for-each)
        / for-each
        / (if-do | if-do-not)
    )+
    / conditional_or
conditional_or = conditional <","? SPACE "or" SPACE> conditional

(* PLAYER TURNS *)
player-turn = player-turn_you
player-turn_you = <"it's" SPACE>? <"your turn">

for-each =
    ((if-do | if-do-not) <SPACE>)?
    <#"(?i)For" SPACE ("every" | "each") SPACE>
    (value <SPACE>)?
    (
          memory-paid
        / for-each-color
        / (
            <"other" SPACE>?
            <"of" SPACE>?
            (
                  target
                / (<SPACE "and" SPACE ("each" SPACE)?>? target)+
            )
            <SPACE "has">?
            (
                <("," | ".")? SPACE>
                (you | opponent | owner | activate | broaden-effect-target | gain_lose)
            )?
        )?
        / ((such <SPACE>)? target)
    )
    (<"," SPACE> activate-again)?
for-each-color = <"color" SPACE> target

broaden-effect-target =
    <"add" SPACE>
    value
    <SPACE "to the" SPACE>
    <#"max(imum)?" SPACE>
    field
    <SPACE "of the" SPACE card-type SPACE "you can choose with this effect">

location = (location_top | location_bottom) / location_anywhere / location_or
location_or = (location <" or "> location)
location_anywhere = <"is" SPACE>? (placed <SPACE>)? (<"under"> | <"into">) (<SPACE> target)?
location_bottom =
    (
        <"face down" SPACE>?
        <("at" | "as") SPACE>?
        <"to" SPACE>?
        <"from" SPACE>?
        <"on" SPACE>?
        <"the" SPACE>?
        <"bottom">
        <SPACE "of">?
    )
location_top =
    <"face down" SPACE>?
    <("at" | "as") SPACE>?
    <"to" SPACE>?
    <"from" SPACE>?
    <"on" SPACE>?
    <"the" SPACE>?
    <"top">
    <SPACE "of">?


(* STATE *)
state =
    (
        ((did-not | does-not | can-not) <SPACE>)?
        (tense <SPACE>)?
        (
              attacks
            | attacking
            | attack-switched
            | block
            | blocked
            | blockable
            | unblockable
            | battling
            | digivolved
            | dna-digivolving
            | survives
            | leave
            | deleted
            | returned
            | suspended
            | unsuspended
            | played
            | played-with
            | added-to
            | checks
        )
        (<SPACE> duration)?
    ) / state-or
state-or = state <SPACE "or" SPACE> state
tense = is | is-not | becomes | was | was-not
is = <"is"> | <"are">
is-not = <"isn't">
was = <"was"> | <"were">
was-not = <"wasn't">
becomes = <"becomes">
did-not = <("didn't" | "did not")>
does-not = <("doesn't" | "does not" | "don't")>


attacks =
    <#"attack(ed|s)?">
    (
        <SPACE>
        with
        <SPACE>
        card-type
        "hello"
        (<SPACE> duration)?
    )?
attacking = <"attacking">
attack-switched = <#"(?i)An" SPACE>? <"attack" SPACE #"targets?" SPACE> tense <SPACE "switched">
<with_without> = with | without
with = (<#"(?i)with"> | <"w/">) <SPACE "a">?
without = <"without"> <SPACE "a">?
block = <#"blocks?">
blocked = <"blocked">
blockable = <"blockable">
unblockable = <"unblockable">
battling = <"battling">
digivolved =
    <"that" SPACE>?
    <#"digivolv(e[sd]?|ing)">
    <SPACE "into">?
    (<SPACE> target)?
    (<SPACE "from" SPACE> level <("," | (SPACE "to")) SPACE> level)?
dna-digivolving = <"DNA digivolving">
for-dna-digivolution = <"for DNA" SPACE #"(?i)Digivolution">
survives = <("and" SPACE)? "survives">
leave =
    <"leave" SPACE>
    <"the" SPACE>?
    zone
deleted =
    <#"delet(ed|ion)" | "trashed" | "removed">
    <SPACE "as a digivolution card">?
    (<SPACE> deleted-by)?
    (<SPACE> (in-battle | outside-battle))?
    (<SPACE> zone)?
deleted-by =
    (
          (<"by" SPACE> (DP | effect))
        | target-effect
    ) | (
        <"due to activating" SPACE>
        target
    )
effect = <("an" SPACE)? "effect">
returned = <"returned"> (<SPACE> zone)? (<SPACE> using-effect)?
added-to =
    <"added">
    (
        (
            (<SPACE> target-effect)?
            (<SPACE> zone)?
        ) | (
            (<SPACE> zone)?
            (<SPACE> target-effect)?
        )
    )
checks =
    (("it" | target) <SPACE>)?
    <"checks">
    (<SPACE> target)?
added = target <SPACE "added" SPACE> target
suspended = <#"suspend(ed|s)"> (<SPACE> target)?
unsuspended = <#"unsuspend(ed)?">
played =
      (<"played is" SPACE> target)
    | (target <SPACE "play">)
    | <"played">
played-with =
    (
        <("played" | "used") SPACE (with | "by") SPACE> target-effect
    ) | (
        target <SPACE ("played" | "used")>
    )
played-from = <"played from" SPACE> zone


(* CHANGE INTO *)
change-into =
    (
          optional_mandatory?
        / (conditional <",">? <SPACE> (optional_mandatory <",">? <SPACE>)?)?
        / ((conditional <",">? <SPACE>)? target)
        / before
    )?
    <SPACE>?
    <"change" SPACE>
    target <SPACE>
    <"into" SPACE> <"a" SPACE>?
    target
    (<SPACE> duration)?


(* DIGIVOLVE INTO *)
digivolve-into =
    (
          optional_mandatory?
        / (conditional <",">? <SPACE> (optional_mandatory <",">? <SPACE>)?)?
        / ((conditional <",">? <SPACE>)? target)
        / before
        / (
            choose <"." SPACE>
            (
                ignore-all-digivolve-requirements
                <SPACE "and" SPACE>
                without-paying-memory-cost
                <"," SPACE>
                optional_mandatory?
            )
        )
    )?
    <SPACE>?
    <"can" (SPACE "be")? SPACE>?
    (only <SPACE>)?
    (
          (target (<SPACE> "DNA")? <SPACE #"(?i)digivolv(e[sd]?|ing)?" SPACE #"[io]nto" SPACE>)
        | (
            ("DNA" <SPACE>)?
            <#"(?i)digivolv(e[sd]?|ing)?">
            (
                <SPACE>
                (
                      target <" and "> target
                    / target
                )
                (<SPACE> among-them)?
            )?
            <SPACE #"[io]nto" SPACE>
        )
    )
    target
    (<SPACE> among-them)?
    <SPACE>?
    play-cost?
    <","? SPACE>?
    (
        (
              for-its-digivolution-cost
            | for-digivolution-cost-of
            | with-digivolution-cost-reduced-by
            | digivolution-cards-for-a-digixros
        )
        (<SPACE> instead)?
        <",">?
    )?
    (
        <SPACE>?
        (
            <SPACE "and" SPACE>?
            (
                  ignore-all-digivolve-requirements
                | ignore-digivolve-level-requirements
                | reduce-digivolution-cost-by
                | suspend_unsuspend
                | by-paying-digivolution-cost
                | without-paying-memory-cost
                | without-paying-digivolve-cost
            )
        )+
    )?
for-digivolution-cost-of = <"for a" SPACE ("digivolution" SPACE)? "cost of" SPACE> value
with-digivolution-cost-reduced-by = <"with the" SPACE ("digivolution" SPACE)? "cost reduced by" SPACE> value
digivolution-cards-for-a-digixros = <("in" | "as") SPACE "digivolution cards for a DigiXros">
by-paying-digivolution-cost = <"by paying its digivolution cost">
for-its-digivolution-cost =
    (
          (<"for its" SPACE> ("DNA" <SPACE>)? <("digivolution" | "memory") SPACE "cost"> (<SPACE> as-if)?)
        | (<"by paying its" SPACE> ("DNA" <SPACE>)? <"digivolve cost">)
        | (<"for the"> <SPACE "digivolution">? <SPACE "cost">)
    )
as-if = <"as if" SPACE> target <SPACE "is a" SPACE> target
ignore-all-digivolve-requirements =
    (target <SPACE>)?
    (can-not <SPACE>)?
    <#"(?i)Ignor(es?|ing)" SPACE> (<("its" | "this card's")> <SPACE>)? <"digivolution requirements">
ignore-digivolve-level-requirements = <", ignoring its level">
optionally-dna-digivolve =
    (
        <"You may DNA digivolve" SPACE>
        target
        <SPACE "and" SPACE>
        target
        <SPACE>
        <"in play" SPACE>?
        <"into a Digimon card" SPACE zone SPACE>
        <("for" | "by paying")>
        <SPACE "its DNA digivolve cost">
    ) | (
        target <SPACE "and" SPACE> target <SPACE "may DNA digivolve into a Digimon card in your hand">
    )


(* UNAFFECTED BY EFFECTS *)
unaffected-by-effects-of =
    (conditional <",">?)
    (target / <"it">)
    <SPACE "isn't affected by" SPACE>
    <"the effects of" SPACE>?
    target
    (<SPACE> duration)?


(* SWITCH ATTACK TARGET *)
switch-attack-to =
    ((conditional | choose) <",">? <SPACE>)?
    (<"and" SPACE>? before <",">? <SPACE>)?
    (optional_mandatory <",">? <SPACE>)?
    (if-do <SPACE>)?
    <#"(?i)Switch" SPACE "the target of attack to" SPACE> target


(* MENTIONS *)
<_mention_> = non? (!timing #"[\[][^\]]*[\]]") <#"'?s">? <SPACE PARENTHESES ","?>?
different-color =
    <#"different(ly)?" SPACE #"color(ed|s)?">
different-name =
    <with SPACE?>?
    <"a" SPACE>?
    <#"different(ly)?" SPACE #"name[ds]?">
    (<SPACE "than" SPACE> target)?
    (<SPACE> that-includes-the-chosen-target-name)?
that-includes-the-chosen-target-name = <"that includes the" SPACE> target <SPACE "name">
token = _mention_ <SPACE #"(?i)Tokens?">
token-attributes =
    <"(" #"\w+? (?i)Tokens?" SPACE "are" SPACE>
    card-type
    <", ">
    DP
    <", and" SPACE ("are" SPACE)?>
    (
          form_digimon-type_attribute
        | (
            form
            <", ">
            digimon-type
            <", and ">
            attribute
        )
    )
    <".)">
form_digimon-type_attribute =
    #"\w+"
    <"/">
    #"\w+"
    <"/">
    #"\w+"
    <SPACE "traits">
form = #"\w+" <SPACE "form">
digimon-type = #"\w+" <SPACE "type">
attribute = #"\w+" <SPACE "attribute">
both-with = <"both" SPACE with SPACE> mention
mention_value_or =
    ((token / _mention_) <"," SPACE>?)+
    <SPACE? ("or " | "/")>
    (token / _mention_)
    (<"," SPACE> other-than)?
mention_or = (mention <"," SPACE>?)+ <SPACE? "or "> mention
mention =
    (
        (
            (with_without <SPACE>?)?
            <"has" SPACE>?
            (value <SPACE>)?
            (
                <" and ">?
                (
                    (
                        (
                              in-name
                            | in-text
                            | (in-traits-or-DP / in-traits)
                            | (in-form-or-type / in-form)
                            | in-attributes
                            | in-digimon-type
                        )
                        (<" and "> different-card-numbers)?
                    )
                    / mention_value_or
                    / (token / _mention_)
                )
                (<SPACE> zone)?
            )+
            (<SPACE> other-than)?
            (<(SPACE "and")? SPACE> play-cost)?
        ) / mention_or
    )
    (<SPACE> different-name)?
is-named = <"is" SPACE> (token / _mention_)
in-text = keyword-effect <SPACE "in" (SPACE ("its" | "their"))? SPACE "text">
in-name =
    (
        (mention_value_or / (token / _mention_))
        <SPACE "in" SPACE>
        <("its" | "their") SPACE>?
        <#"names?">
        <SPACE PARENTHESES>?
    ) | (
        <("if" SPACE)? #"names?" SPACE "contains" SPACE>
        (mention_value_or / (token / _mention_))
    )
in-traits =
    (
        (mention_value_or / (token / _mention_))
        <",">?
        <SPACE "in" SPACE>
        <"one of" SPACE>?
        <("its" | "their") SPACE>?
        <#"traits?">
    ) | (
        <"the" SPACE>?
        (mention_value_or / (token / _mention_))
        <SPACE #"traits?">
    )
in-form =
    (mention_value_or / (token / _mention_))
    <SPACE "in" SPACE>
    <("its" | "their") SPACE>?
    <#"forms?">
in-traits-or-DP =
    (mention_value_or / (token / _mention_))
    <SPACE "in" SPACE>
    <("its" | "their") SPACE>?
    <#"traits?" SPACE "or" SPACE> DP
in-form-or-type =
    (mention_value_or / (token / _mention_))
    <SPACE "in" SPACE>
    <("its" | "their") SPACE>?
    <#"forms?" SPACE "or" SPACE #"types?">
in-attributes =
    (mention_value_or / (token / _mention_))
    <SPACE "in" SPACE>
    <("its" | "their") SPACE>?
    <#"attributes?">
in-digimon-type =
    (mention_value_or / (token / _mention_))
    <SPACE "in" SPACE>
    <("its" | "their") SPACE>?
    <#"types?">

different-card-numbers = <"different card numbers">


(* DECK LIMIT OF CARD *)
deck-limit-of-this-card =
    <"You can include up to ">
    value
    <" copies of cards with this card's card number in your deck.">
