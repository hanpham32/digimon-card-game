<S> = CARD_RULE / CARD_RULE+
    
CARD_RULE =
    (
        (
            (
                <SPACE>?
                (
                      timing
                    | phase
                    | keyword-effect
                )
                <SPACE>?
            )+
            | keyword-effect_dna-digivolve
        )
        /
        (
            (
                (
                    (
                        <SPACE>?
                        (
                              timing
                            | phase
                            | keyword-effect
                        )
                        <SPACE>?
                    )+
                    | keyword-effect_dna-digivolve
                )
                <SPACE>?
            )*
            (
                <SPACE>?
                (
                    target
                    | gain_lose
                    | play
                    | suspend_unsuspend
                    | trash_delete
                    | activate
                    | attack
                    | disallow
                    | return
                    | add
                    | trigger
                    | reveal
                    | look-at-and-reveal
                    | _place_
                    | search
                    | shuffle
                    | li
                    | disable
                    | reduce-digivolution-cost-by
                    | digivolve-into
                    | optionally-dna-digivolve
                    | also-treat-as
                    | unaffected-by-effects-of
                    | set-memory-to
                    | set-original-dp-to
                )
            )
        )
    )
    <".">?
<SPACE> = #"\s+"
<OPEN_QUOTE> = "“" | '"'
<CLOSE_QUOTE> = "“" | '"'

<PARENTHESES> = <#"[(][^)]*[)]">
optional = <#"(?i)you" SPACE>? <("may" | "can" | #"(?i)by")> <SPACE "also">?
before =
    (
        (<"When" SPACE> target <SPACE "would">)
        | (
            <#"(?i)The next time" SPACE> target
            <SPACE "would" SPACE> state
            (<SPACE> duration)?
            <",">
        )
    )

OPERATOR = "+" | "-"
LTE =
    (
          <#"(?i)Up to">
        | (<#"or (less|lower|fewer)"> (<SPACE> among-them)?)
        | <"is less than or equal to">
    )
    (<SPACE> equate-with)?
GTE = <#"or (more|higher)"> (<SPACE> equate-with)?
MAX = <"the highest">
ZERO = <(#"(?i)with" SPACE)>? <"no">
ONE = <"a" | "an" | "the" | "one">
ALL = <#"(?i)all"> <(SPACE "of" (SPACE "the")?)>?
ANY = <#"(?i)any"> <SPACE "number">?
value =
    (
        ALL | ANY | ZERO | ONE |
        (
            (LTE <SPACE>)?
            OPERATOR?
            (#"[0-9]+" <SPACE "of">? / MAX)
            (<SPACE> (LTE | GTE))?
        )
    ) / value_or
value_or = (value <" or "> value)
equate-with = target
among-them = <"among them">

(* COLORS *)
color = (red | blue | yellow | green | purple | black | white) / color_or
color_or = (color <" or "> color)
red = <#"(?i)red">
blue = <#"(?i)blue">
yellow = <#"(?i)yellow">
green = <#"(?i)green">
purple = <#"(?i)purple">
black = <#"(?i)black">
white = <#"(?i)white">


(* PHASE *)
phase =
    <"[">
    (
          breeding
        | hand
        | once-per-turn
        | twice-per-turn
        | trash_phase
    )
    <"]">
breeding = <"Breeding">
hand = <"Hand">
once-per-turn = <"Once Per Turn">
twice-per-turn = <"Twice Per Turn">
trash_phase = <"Trash">


(* TIMING *)
timing =
    <"[">
    (
          all-turns
        | start-of-opponent-turn
        | end-of-opponent-turn
        | start-of-your-turn
        | end-of-your-turn
        | when-attacking
        | your-turn
        | opponent-turn
        | main
        | counter
        | end-of-all-turns
        | on-play
        | digivolve
        | end-of-attack
        | start-of-your-main-phase
        | start-of-opponent-main-phase
        | security
        | when-digivolving
        | on-deletion
    )
    <"]">

all-turns = <"All Turns">
start-of-opponent-turn = <"Start of Opponent's Turn">
end-of-opponent-turn = <("At End of Opponent's Turn" | "End of Opponent's Turn")>
start-of-your-turn = <"Start of Your Turn">
end-of-your-turn = <"End of Your Turn">
when-attacking = <"When Attacking">
your-turn = <"Your Turn">
opponent-turn = <"Opponent's Turn">
main = <"Main">
counter = <"Counter">
end-of-all-turns = <"End of All Turns">
on-play = <"On Play">
digivolve = <"Digivolve">
end-of-attack = <"End of Attack">
start-of-your-main-phase = <"Start of Your Main Phase">
start-of-opponent-main-phase = <"Start of Opponent's Main Phase">
security = <"Security">
when-digivolving = <"When Digivolving">
on-deletion = <"On Deletion">


(* KEYWORD-EFFECT *)
use = <#"(?i)use"> <SPACE>
keyword-effect =
    (conditional <",">? <SPACE>)?
    use?
    (without <SPACE>)?
    (
          blocker
        | digi-burst
        | draw
        | rush
        | security-attack
        | alliance
        | armor-purge
        | barrier
        | blast-digivolve
        | blitz
        | de-digivolve
        | decoy
        | delay
        | digi-burst
        | digisorption
        | evade
        | fortitude
        | jamming
        | material-save
        | mind-link
        | overflow
        | piercing
        | raid
        | reboot
        | save
        | retaliation
        | recovery
    )
    (<SPACE> target)?
    (<"."? SPACE?>? PARENTHESES)?
blocker = <#"[\<＜]"> <#"(?i)Blocker"> <#"[\>＞]"> <" to suspend one of your " card_type>?
digi-burst = <#"[\<＜]"> <#"(?i)Digi\-Burst"> <SPACE>? value <#"[\>＞]">
draw = <#"[\<＜]"> <#"(?i)Draw"> <SPACE>? value <#"[\>＞]">
rush = <#"[\<＜]"> <#"(?i)Rush"> <#"[\>＞]">
security-attack = <#"[\<＜]"> <(#"(?i)S Attack" | #"(?i)Security A\S*")> (<SPACE>? value)? <#"[\>＞]">
alliance = <#"[\<＜]"> <#"(?i)Alliance"> <#"[\>＞]">
armor-purge = <#"[\<＜]"> <#"(?i)Armor Purge"> <#"[\>＞]">
barrier = <#"[\<＜]"> <#"(?i)Barrier"> <#"[\>＞]">
blast-digivolve = <#"[\<＜]"> <#"(?i)Blast Digivolve"> <#"[\>＞]">
blitz = <#"[\<＜]"> <#"(?i)Blitz"> <#"[\>＞]">
de-digivolve = <#"[\<＜]"> <#"(?i)De\-Digivolve"> (<SPACE>? value)? <#"[\>＞]">
decoy = <#"[\<＜]"> <#"(?i)Decoy"> <SPACE>? <"("> (color <"/"> color) <"trait">? <")"> <#"[\>＞]">
delay = <#"[\<＜]"> <#"(?i)Delay"> <#"[\>＞]">
digi-burst = <#"[\<＜]"> <#"(?i)Digi\-Burst"> (<SPACE>? value)? <#"[\>＞]">
digisorption = <#"[\<＜]"> <#"(?i)Digisorption"> (<SPACE>? value)? <#"[\>＞]">
evade = <#"[\<＜]"> <#"(?i)Evade"> <#"[\>＞]">
fortitude = <#"[\<＜]"> <#"(?i)Fortitude"> <#"[\>＞]">
jamming = <#"[\<＜]"> <#"(?i)Jamming"> <#"[\>＞]">
material-save = <#"[\<＜]"> <#"(?i)Material Save"> <SPACE>? value <#"[\>＞]">
mind-link = <#"[\<＜]"> <#"(?i)Mind Link"> <#"[\>＞]">
overflow = <#"[\<＜]"> <#"(?i)Overflow"> <SPACE>? <"("> value <")"> <#"[\>＞]">
piercing = <#"[\<＜]"> <#"(?i)Piercing"> <#"[\>＞]">
raid = <#"[\<＜]"> <#"(?i)Raid"> <#"[\>＞]">
reboot = <#"[\<＜]"> <#"(?i)Reboot"> <#"[\>＞]">
save = <#"[\<＜]"> <#"(?i)Save"> <#"[\>＞]">
retaliation = <#"[\<＜]"> <#"(?i)Retaliation"> <#"[\>＞]">
recovery = <#"[\<＜]"> <#"(?i)Recovery"> (<SPACE>? value)? <SPACE>? <"(Deck)"> <#"[\>＞]">

keyword-effect_dna-digivolve =
    <#"[\<＜]">
    <"DNA Digivolution:" SPACE>
    value
    <SPACE "from" SPACE>
    dna-digivolve-requirement <" + "> dna-digivolve-requirement
    <#"[\>＞]">
    <SPACE "Digivolve unsuspended with the 2 specified Digimon stacked on top of each other.">?
dna-digivolve-requirement = color <SPACE> level


(* GAIN/LOSE *)
gain_lose =
    <#"(?i)then\,?">?
    (
        conditional
        | duration
        | choose
    )?
    (lose | gain)+
    (<SPACE> conditional)?
    (<SPACE> duration)?
    (<("."? SPACE)>? PARENTHESES)?
lose =
    <#",?( and )?">?
    <SPACE>?
    (target+ <SPACE>)?
    <(#"(?i)(loses?|decreasing your)") SPACE>
    (
        <" and ">?
        (
              DP
            | keyword-effect
            | memory
            | ((<"the following effect" SPACE> duration <":">? <SPACE>)? <OPEN_QUOTE> CARD_RULE <CLOSE_QUOTE>)
        )
    )+
gain =
    <#",?( and )?">?
    <SPACE>?
    (target+ <SPACE>)?
    <(#"(?i)gets?" | #"(?i)gains?") SPACE>
    (
        <" and ">?
        (
              DP
            | keyword-effect
            | memory
            | ((<"the following effect" SPACE> duration <":">? <SPACE>)? <OPEN_QUOTE> CARD_RULE <CLOSE_QUOTE>)
        )
    )+
DP =
    (
          <"whose total" SPACE>
        | (<("with" | "dropping to") SPACE>? value <SPACE>)
    )?
    <"DP">
    (<SPACE> sum)?
    (<SPACE> (LTE | GTE))?
sum = (<"adds up to "> value) | (<"for each of its "> field)
level =
    (<("a" | "is") SPACE>)?
    (<#"[Ll][Vv]\."> | <#"(?i)level\s+">)
    (<SPACE>? <"of">)?
    <SPACE>? value
memory = (value <SPACE>)? <"memory"> (<SPACE "by" SPACE> value)?
set-memory-to = conditional <"set" SPACE> target <SPACE "memory to" SPACE> value
set-original-dp-to = <"Change the original DP of" SPACE> target <SPACE "to" SPACE> value <SPACE> duration
play-cost =
    (value <SPACE>)?
    (<(("with" | "for") SPACE)? "a" SPACE>)?
    (<("play" | "memory") SPACE>)? <"cost">
    <SPACE "of">?
    <SPACE> value
reduce-play-cost-by = (<"reduce"> | <"decrease">) <SPACE "its play cost by" SPACE> value
reduce-digivolution-cost-by =
    (duration <SPACE>)?
    (before <SPACE>)?
    (
        ((<"reduce"> | <"decrease">) <" the memory cost of the digivolution by ">)
        |
        ((<"reduce"> | <"decrease">) <" the digivolution cost by ">)
    )
    value
    (<SPACE> duration)?


(* DURATION *)
duration =
      current-turn
    | end-of-turn
    | end-of-your-next-turn
    | end-of-opponents-turn
    | end-of-opponents-next-turn
    | end-of-battle
    | opponents-next-unsuspend-phase
current-turn = ((<#"(?i)For the turn"> <",">?) | <"this turn">)
end-of-turn = <#"(?i)At end of turn">
end-of-your-next-turn = <#"(?i)until the end of your next turn">
end-of-opponents-turn = <#"(?i)until the end of (your opponent\'s|their) turn">
end-of-opponents-next-turn = <#"(?i)until the end of (your opponent\'s|their) next turn">
end-of-battle = <"At the "? #"end of( the)? battle" ","?>
opponents-next-unsuspend-phase =
    <"during" SPACE>
    (<"its owner's"> | <"their">)
    <SPACE "next unsuspend phase">


(* PLAY *)
play =
    (
        ((conditional | choose) <",">? <SPACE>)?
        (duration <SPACE>)?
        ((optional | before) <SPACE>)?
    )?
    <"and" SPACE>?
    <#"(?i)(play|use)" SPACE>
    (target_or / target_and-or / (<" and ">? target)+)
    <",">?
    (
        <SPACE>
        (
              <"as another Digimon">
            | zone
            | keyword-effect
        )
    )?
    (
        (<SPACE> (no-memory-cost | no-color-requirement))
        |
        (<"," SPACE> conditional <SPACE> reduce-play-cost-by)?
        |
        (<"," SPACE> (gain_lose | trash_delete))
    )?
    disallow-on-play-effects-for-played-cards?
disallow-on-play-effects-for-played-cards =
    <". Any [On Play] effects on ">
    <"the ">?
    <#"(?i)Digimon|Tamer">
    <" played with this effect don't activate">
using-effect = <("using" | "by") " an effect">
no-memory-cost = <#"without paying (its|their|the)( memory)? costs?">
no-color-requirement = <#"without meeting (its|their) color requirements?">


(* TRASH *)
<trash_delete> =
    trash-zone
    /
    (
          trash
        | trash-to-trash
        | trash-to-reveal
        | trash-to-keyword
        | deletes-in-battle
    )
<_trash_prelude_> =
    ((<#"(?i)Then"> | conditional | choose | if-you-do) <",">? <SPACE>?)?
    (optional <SPACE>)?
    <#"(?i)(deletes?|trash(es|ing)?)" SPACE>
trash =
    _trash_prelude_
    (
        (
            target
            (<SPACE> choose)?
            (<SPACE> conditional)?
        )
        | (zone | remaining_cards)
        | <"them">
    )
    (<" and ">? trash_delete)?
trash-to-trash = _trash_prelude_ target <SPACE "to" SPACE> trash_delete
trash-to-reveal = _trash_prelude_ target <SPACE "to" SPACE> reveal
trash-to-keyword = _trash_prelude_ target <"," SPACE> keyword-effect
trash-zone = _trash_prelude_ zone
deletes-in-battle = _trash_prelude_ target <SPACE in-battle SPACE> survives? (<"," SPACE> (trash-zone | unsuspend))?


(* ACTIVATE *)
activate = <#"(?i)activate"> <SPACE> target <SPACE> timing <(" effect")>


(* SUSPEND/UNSUSPEND *)
<suspend_unsuspend> =
      suspend
    | suspend_or
    | unsuspend
    | suspend-to-unsuspend
    | suspend-to-return
    | suspend-to-reveal
    | suspend-to-trash
    | suspend-and-disallow-unsuspend
    | suspend-to-hatch-or-move-target-to-battle-area
suspend =
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)suspend" SPACE> target
    ((<SPACE "to" SPACE> gain_lose) | add)?
suspend_or = <#"(?i)suspend "> target <", or "> target
unsuspend =
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)unsuspend" SPACE> target
    (<SPACE "by" SPACE> (gain_lose | trash_delete | return))?
suspend-to-unsuspend =
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)suspend" SPACE> target
    (<SPACE "to" SPACE>? unsuspend)
suspend-to-return =
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)suspend" SPACE> target
    (<SPACE ("to" | "and") SPACE>? return)
suspend-to-reveal =
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)suspend" SPACE> target
    (<SPACE ("to" | "and") SPACE>? reveal)
suspend-to-trash =
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)suspend" SPACE> target
    (<SPACE ("to" | "and") SPACE>? trash_delete)
suspend-and-disallow-unsuspend =
    <#"(?i)suspend" SPACE> target
    <"." SPACE> conditional <SPACE> target
    <SPACE "doesn't unsuspend" SPACE> duration
suspend-to-hatch-or-move-target-to-battle-area =
    conditional?
    <SPACE "you can suspend" SPACE>
    target
    <SPACE "to hatch 1 Digi-Egg card to an empty space in your breeding area, or move" SPACE>
    target
    <SPACE "from your breeding area to your battle area">


(* RETURN *)
return =
    <("."? SPACE? (#"(?i)then\,?" | ",") SPACE)>?
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)return(ing)?" SPACE> target <SPACE>? zone
    trash_delete?
    (<" to "> gain_lose)?
    <"." SPACE PARENTHESES>?


(* ADD TO HAND *)
add = 
    (
        <("."? SPACE? (#"(?i)then\,?" | ",") SPACE) | ", and ">?
        <#"(?i)add"> <SPACE>
        (<" and ">? target)+ <SPACE>
        (among-them <SPACE>)? <"to" SPACE>?
        zone
        <("." SPACE PARENTHESES)>?
    )


(* TRIGGER *)
trigger =
    (conditional <",">? <SPACE>)?
    <#"(?i)trigger" SPACE>
    keyword-effect
    (<SPACE "on" SPACE> target)?
    (<".">? <SPACE> PARENTHESES)?
    (<SPACE> conditional)?


(* REVEAL *)
reveal =
    (optional <SPACE>)?
    <#"(?i)reveal" SPACE> zone
    (
        <"." SPACE?>
        (conditional <SPACE>)?
        (play <"." SPACE?>)?
        (add <"." SPACE?>)?
        (digivolve-into)?
        (otherwise | _place_)?
    )?
look-at-and-reveal =
    <#"(?i)look at" SPACE>
    zone
    <", then reveal" SPACE>
    target
    <SPACE "in it and" SPACE>
    add
    <"." SPACE> trigger <SPACE>
    shuffle


(* OTHERWISE *)
otherwise = <SPACE? "Otherwise" ","? SPACE> _place_


(* PLACE *)
<_place_> =
      place
    | place-to-trash
    | place-to-reveal
    | place-to-gain
    | place-to-disallow
place =
    ((conditional | <#"(?i)Then,">) <SPACE>)?
    (optional <SPACE>)?
    <("."? SPACE)>?
    <#"(?i)plac(es?|ing)" SPACE>
    target
    (<SPACE> zone (<SPACE> order)?)?
place-to-trash = place <"," SPACE> trash
place-to-reveal = place <"," SPACE> reveal
place-to-gain = place <"," SPACE> gain_lose
place-to-disallow = place <"," SPACE> disallow

order = order_any
order_any = <"in any order">


(* LIST ITEM *)
li = <("・" | "*")> S


(* SEARCH *)
search =
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)search">
    <SPACE> zone <SPACE "for" SPACE> target
    <" and ">
    play


(* SHUFFLE *)
shuffle =
    <#"(?i)then\,?" SPACE>?
    <#"(?i)shuffle">
    <SPACE> zone


(* ALSO TREAT AS *)
also-treat-as = <"Also treat as" SPACE> (treat-as-name | treat-as-traits)+
treat-as-name = <(SPACE "and" | "if") SPACE "name is" SPACE> mention
treat-as-traits = <(SPACE "and" SPACE)? "traits include" SPACE> mention


(* ATTACK *)
attack = target <SPACE> (optional <SPACE>)? <#"(?i)attacks?"> <SPACE> target (<SPACE> duration)?


(* TARGET *)
target =
    (
        zone
        / (
              itself
            | that
            | (opponent / you)
            | owner
            | player
            | players
            | remaining_cards
            | effect
            | security-stack
            | number-of-cards
        ) / mention / card_type
    )
    (<SPACE> has-attribute)?
target_and-or = target <" and/or "> target
target_or = target <" or "> target
itself = <("it"|#"(?i)This") SPACE> card_type
that = (<"of" SPACE>? (<#"(?i)That|Those" SPACE> card_type) | <"it"> | (<"the played "> card_type))
you =
    (
        (value <SPACE>)?
        <"of" SPACE>?
        <(#"(?i)you(\'ve)?" | "your")>
        <(SPACE "other")>?
        <(SPACE "have")>?
        (
            <SPACE>
            (value <SPACE>)?
            (number-of-cards | state | level)
        )?
        (<SPACE> effect)?
        (<SPACE> card_type)?
        (<SPACE> (keyword-effect | DP))?
    )
opponent =
    (
        (value <SPACE>)?
        <"of" SPACE>?
        (state <SPACE>)?
        (<#"(?i)(your |an )?opponent(\'s)?"> | <#"(?i)their">)
        <(SPACE ("have" | "has"))>?
        (
            <SPACE>
            (value <SPACE>)?
            (number-of-cards | state | level)
        )?
        (<SPACE> effect)?
        (<SPACE> card_type)?
        (<SPACE> (keyword-effect | DP))?
    )
owner = <"its owner's">
player = <"a" SPACE>? <#"(?i)player">
players = <"a" SPACE>? <#"(?i)players">
card_type =
    <"another" SPACE>?
    (state <SPACE>)?
    (
        (
              digi-egg_card_type
            | digimon_card_type
            | (security_digimon_card_type / security_card_type)
            | tamer_card_type
            | option_card_type
        )
        / any_card_type
    )
    (<SPACE> field)?
    (<SPACE> has-attribute)?
    (<SPACE> (is-named / mention))?
    (<SPACE> same-name)?
    (<SPACE> using-effect)?
    (<SPACE> state)?
card_type-or = color <" or "> mention
has-attribute =
    (
        (<#"(that )?has"> | <"that's"> | <#"with( a)?">)
        <SPACE>
        (card_type-or / (color | level | keyword-effect))
    )
same-name = <"that share a name with it">
remaining_cards = <"the remaining cards" | "the rest">
effect = <#"(?i)(This )?effects?">
field = <#"with" SPACE>? (MAX <SPACE>)? (field_level | field_color)
field_level = <#"levels?">
field_color = <#"colors?">
by-target-effects = <"by" SPACE> target <SPACE "effects">

any_card_type =
    (
        (
            (value <SPACE>)?
            ((color | level) <SPACE>?)*
            <#"card(\'?s)?">
            (<SPACE "is" SPACE> color)?
        )
        /
        (
            (value <SPACE>)
            ((color | level) <SPACE>?)+
        )
    )
digimon_card_type =
    (value <SPACE>)?
    ((color | level) <SPACE>)*
    <"card is a" SPACE>?
    <#"(?i)Digimon(\'s)?">
    (<SPACE> <"with" SPACE>? zone)?
    (<SPACE> state)?
    (<SPACE "whose" SPACE> field (<SPACE> (value | (LTE | GTE)))?)?
    <SPACE "card">?
    (<SPACE> play-cost)?
security_digimon_card_type = <#"(?i)Security Digimon"> <SPACE "card">?
security_card_type = (value <SPACE>)? <#"(?i)Security cards?"> (<SPACE> (LTE | GTE))?
digi-egg_card_type = <#"(?i)Digi-Eggs?"> <SPACE #"cards?">?
tamer_card_type = (value <SPACE>)? ((color | level) <SPACE>)* <#"(?i)Tamers?"> <SPACE #"cards?">? (<SPACE> play-cost)?
option_card_type = (value <SPACE>)? ((color | level) <SPACE>)* <#"(?i)Options?"> <SPACE #"cards?">? (<SPACE> play-cost)?


(* ZONES *)
zone =
    zones / (
        (location <SPACE>)?
        (zones <SPACE>)?
        (value <SPACE>)?
        <(#"cards?" SPACE)? ("from" | "of" | "in" | "to") SPACE>?
        (location <SPACE>)?
        (
            (zone_or / zones)
            /
            ((target <SPACE>) (zone_or / zones))
            /
            ((zone_or / zones) (<SPACE> target))
            /
            target
        )
    )
<zones> = zone_digivolution-cards / (zone_deck | zone_hand | zone_trash | zone_security | zone_battle-area)
zone_or = zones <" or "> zones
zone_deck = (value <SPACE>)? <"cards in" SPACE>? (target <SPACE>)? <"deck">
zone_hand = (value <SPACE>)? <"cards in" SPACE>? (target <SPACE>)? <"hand">
zone_trash = (value <SPACE>)? <"cards in" SPACE>? (target <SPACE>)? <("trash" | "recycle bin")>
zone_security = (value <SPACE>)? <"cards in" SPACE>? (target <SPACE>)? <"security" (SPACE ("stack" | "cards"))?> <SPACE "face down">?
zone_battle-area = (value <SPACE>)? <"cards in" SPACE>? (target <SPACE>)? <#"(?i)battle area">
zone_digivolution-cards =
    (<"as its" SPACE> location <SPACE>)?
    (<"from" SPACE> target <SPACE>)?
    (<"that" SPACE>? <"has" SPACE> value <SPACE>)?
    (target <SPACE>)?
    <#"(?i)digivol(ve|ving|ution) card(s)?">
    (<SPACE "of" SPACE> value <SPACE "of" SPACE> target)?
number-of-cards = <"the number of cards in"> <SPACE> zone (<SPACE> (LTE | GTE))?


(* CHOOSE *)
choose =
    (<#"(?i)Choose" SPACE>)
    target
    conditional?
    (<(SPACE "and" | "." SPACE)> <SPACE>?)?
disable =
    target <SPACE>
    <"can't" (SPACE "be")?>
    (<SPACE> state)?
    <SPACE "or">?
    (<SPACE> by-target-effects)?
    (<SPACE> state)?
    (<SPACE> duration)?

in-battle = <"in battle">

(* SECURTIY STACK *)
(* NOTE: Attacking a player is also the same as attacking security *)
security-stack = value <SPACE> location <SPACE> <"of" SPACE> target <SPACE> <"security stack">
any-security-stack-decremented = <"a card is removed from a player's security stack">

<disallow> =
      disallow-attack
    | disallow-block
    | disallow-attack-and-block
    | disallow-reduce-play-cost
    | disallow-activation
    | disallow-delete-or-return
    | disallow-unsuspend
disallow-attack =
    (
        target
        <SPACE "can't attack" SPACE>
        target
    )
    |
    (
        duration <"," SPACE>
        target
        <SPACE "can't attack">
    )
disallow-block =
    target
    <SPACE "can't be blocked by" SPACE>
    target
disallow-unsuspend =
    target
    <SPACE "don't unsuspend" SPACE>
    duration
disallow-attack-and-block =
    (
        choose?
        target
        <SPACE "can't attack or block" SPACE>
        (target | duration)
    )
    |
    (
        duration <"," SPACE>
        target
        <SPACE "can't attack or block">
    )
disallow-reduce-play-cost = target <SPACE> <"can't reduce play costs">
disallow-activation =
    (conditional <"," SPACE>)?
    target
    <SPACE "doesn't activate" SPACE>
    timing
    <SPACE ("skills" | "effects") SPACE "on" SPACE>
    target
    <SPACE "it checks">
disallow-delete-or-return = target <SPACE> <"can't delete"> <SPACE> target <" or "> return <SPACE> duration


if-you-do = <"If you do">
conditional =
    (
        (
            <#"(?i)Then\,?" SPACE>?
            <#"(?i)(when|while( there are)?|(if there are)|(if( it\'s a)?))" SPACE>
            (
                (((<"you "> play) / attack / target / dna-digivolving / any-security-stack-decremented) <","? SPACE?>)
                /
                (
                    target <SPACE>
                    (
                          level
                        | play-cost
                        | memory
                        | keyword-effect
                    )
                    <","? SPACE?>
                )
            )
            <"," SPACE>?
        )
        |
        for-every
    )+
    (<"."> <SPACE> disable)?

for-every = <#"(?i)for every" SPACE> target <SPACE "has">? (<SPACE> (you | opponent | owner))?
location = (location_top | location_bottom) / location_anywhere / location_or
location_or = (location <" or "> location)
location_anywhere = <#"(placed )?under">
location_bottom =
    (
        <"face down" SPACE>?
        (((<"at"> | <"to">) <SPACE>)? <"the" SPACE>)?
        <"bottom">
        <SPACE "of">?
    ) | <"under">
location_top = <"face down at" SPACE>? <"from "? "the" SPACE>? <"on "? "the "? "top" " of"?> <SPACE "card">?


(* STATE *)
state =
    ((did-not | does-not) <SPACE>)?
    (tense <SPACE>)?
    (
          attacks
        | block
        | blocked
        | blockable
        | unblockable
        | battling
        | digivolved
        | dna-digivolving
        | survives
        | deleted
        | suspended
        | unsuspended
        | in-play)
    (<SPACE> duration)?
tense = is | becomes | was
is = <"is">
was = <"was">
becomes = <"becomes">
did-not = <("didn't" | "did not")>
does-not = <("doesn't" | "does not")>


attacks = <#"attacks?"> (<SPACE> with <SPACE> card_type <SPACE> duration)?
with = <"with"> <SPACE "a">?
without = <"without"> <SPACE "a">?
block = <#"blocks?">
blocked = <"blocked">
blockable = <"blockable">
unblockable = <"unblockable">
battling = <"battling">
digivolved = <#"digivolved?"> (<SPACE> target)? (<SPACE "from" SPACE> level <SPACE "to" SPACE> level)?
dna-digivolving = <"DNA digivolving">
survives = <("and" SPACE)? "survives">
deleted = <"deleted"> deleted-by?
deleted-by = <SPACE "by"> <SPACE> (DP | effect)
suspended = <"suspended">
unsuspended = <"unsuspended">
in-play = <"in play">


(* DIGIVOLVE INTO *)
digivolve-into =
    (
          (conditional <",">? <SPACE>)?
        / ((conditional <",">? <SPACE>)? target)
        / before
    )?
    <SPACE>?
    <("can" SPACE)? #"digivolves?"> (<SPACE> target)? <SPACE "into" SPACE>
    target
    (<SPACE> among-them)?
    <SPACE>?
    play-cost?
    <(","? SPACE)>?
    (ignore-digivolve-requirements | reduce-digivolution-cost-by | suspend_unsuspend | no-memory-cost)
ignore-digivolve-requirements = <"ignoring its digivolution requirements">
optionally-dna-digivolve =
    <"You may DNA digivolve this Digimon and">
    <" one of your other Digimon in play into a Digimon card in your hand ">
    <("for" | "by paying")>
    <" its DNA digivolve cost">


(* UNAFFECTED BY EFFECTS *)
unaffected-by-effects-of =
    (conditional <",">?)
    <SPACE "it isn't affected by the effects of" SPACE>
    target


(* MENTIONS *)
<_mention_> = #"[\[][^\]]*[\]]"
mention_value_or = (_mention_ <"," SPACE>?)+ <SPACE? "or "> _mention_
mention_or = mention <" or "> mention
mention =
    (
        <with SPACE>?
        <"has" SPACE>?
        (value <SPACE>)?
        (_mention_ | mention_value_or)
        (<SPACE> (in-name | in-traits) (<" and "> play-cost)?)?
    ) / mention_or
is-named = <"is" SPACE> _mention_
in-name = <"in" SPACE> <("its" | "their") SPACE>? <#"names?">
in-traits = <"in" SPACE> <("its" | "their") SPACE>? <#"traits?">
