<S> = CARD_RULE / CARD_RULE+
    
CARD_RULE =
    (
        ((((timing | phase) keyword-effect) | keyword-effect_dna-digivolve) <SPACE>?)+
        /
        ((timing | phase | keyword-effect | keyword-effect_dna-digivolve) <SPACE>?)+
        /
        (
            ((timing | phase | keyword-effect | keyword-effect_dna-digivolve) <SPACE>?)*
            (
                <SPACE>?
                (
                    target
                    | (gain_lose / play)
                    | suspend_unsuspend
                    | trash_delete
                    | activate
                    | attack
                    | disallow
                    | return
                    | add
                    | trigger
                    | reveal
                    | place
                    | search
                    | shuffle
                    | li
                    | disable
                    | reduce-digivolution-cost-by
                    | digivolve-into
                    | optionally-dna-digivolve
                    | also-treat-as
                )
            )
        )
    )
    <".">?
<SPACE> = #"\s+"

<PARENTHESES> = <#"[(][^)]*[)]">
optional = <#"(?i)you" SPACE>? <("may" | "can" | #"(?i)by")> <SPACE "also">?
before =
    (
        (<"When" SPACE> target <SPACE "would">)
        |
        (<"The next time" SPACE> target <SPACE "would" SPACE> state <SPACE> duration <",">)
    )

OPERATOR = "+" | "-"
LTE = <(#"(?i)Up to" | #"or (less|lower|fewer)" | "is less than or equal to")> (<SPACE> your-opponent)?
GTE = <#"or (more|higher)">
MAX = <"the highest">
ZERO = <(#"(?i)with" SPACE)>? <"no">
ONE = <"a" | "the" | "one"> (* TODO: possibly "a" should mean "at least one"? *)
ALL = <#"(?i)all"> <(SPACE "of" (SPACE "the")?)>?
ANY = <#"(?i)any"> <SPACE "number">?
value =
    (
        ALL | ANY | ZERO | ONE |
        (
            (LTE <SPACE>)?
            OPERATOR?
            (#"[0-9]+" <SPACE "of">? / MAX / target_field)
            (<SPACE> (LTE | GTE))?
        )
    ) / value_or
value_or = (value <" or "> value)
or =
    (
        (target <" or "> target)
        /
        zone_or
    )
and = 
    (
        (mention <" and "> mention)
        /
        (target <" and "> target)
    )
and_or = target <" and/or "> target

(* COLORS *)
color = (red | blue | yellow | green | purple | black | white) / color_or
color_or = (color <" or "> color)
red = <#"(?i)red">
blue = <#"(?i)blue">
yellow = <#"(?i)yellow">
green = <#"(?i)green">
purple = <#"(?i)purple">
black = <#"(?i)black">
white = <#"(?i)white">


(* PHASE *)
phase = <"["> (breeding | hand | once-per-turn | twice-per-turn | trash_phase) <"]">
breeding = <"Breeding">
hand = <"Hand">
once-per-turn = <"Once Per Turn">
twice-per-turn = <"Twice Per Turn">
trash_phase = <"Trash">


(* TIMING *)
timing =
    <"[">
    (
          all-turns
        | start-of-opponent-turn
        | end-of-opponent-turn
        | start-of-your-turn
        | end-of-your-turn
        | when-attacking
        | your-turn
        | opponent-turn
        | main
        | counter
        | end-of-all-turns
        | on-play
        | digivolve
        | end-of-attack
        | start-of-your-main-phase
        | start-of-opponent-main-phase
        | security
        | when-digivolving
        | on-deletion
    )
    <"]">

all-turns = <"All Turns">
start-of-opponent-turn = <"Start of Opponent's Turn">
end-of-opponent-turn = <("At End of Opponent's Turn" | "End of Opponent's Turn")>
start-of-your-turn = <"Start of Your Turn">
end-of-your-turn = <"End of Your Turn">
when-attacking = <"When Attacking">
your-turn = <"Your Turn">
opponent-turn = <"Opponent's Turn">
main = <"Main">
counter = <"Counter">
end-of-all-turns = <"End of All Turns">
on-play = <"On Play">
digivolve = <"Digivolve">
end-of-attack = <"End of Attack">
start-of-your-main-phase = <"Start of Your Main Phase">
start-of-opponent-main-phase = <"Start of Opponent's Main Phase">
security = <"Security">
when-digivolving = <"When Digivolving">
on-deletion = <"On Deletion">


(* KEYWORD-EFFECT *)
use = <#"(?i)use"> <SPACE>
keyword-effect =
    (conditional <",">? <SPACE>)?
    use?
    (without <SPACE>)?
    <#"[\<＜]">
    (
          blocker
        | digi-burst
        | draw
        | rush
        | security-attack
        | alliance
        | armor-purge
        | barrier
        | blast-digivolve
        | blitz
        | de-digivolve
        | decoy
        | delay
        | digi-burst
        | digisorption
        | evade
        | fortitude
        | jamming
        | material-save
        | mind-link
        | overflow
        | piercing
        | raid
        | reboot
        | save
        | retaliation
        | recovery
    )
    <#"[\>＞]">
    (* TODO: ST5-14 *)
    <SPACE "to suspend one of your Digimon">?
    (<SPACE> target)?
    (<("."? SPACE?)>? PARENTHESES)?
blocker = <#"(?i)Blocker">
digi-burst = <#"(?i)Digi\-Burst"> <SPACE>? value
draw = <#"(?i)Draw"> <SPACE>? value
rush = <#"(?i)Rush">
security-attack = <(#"(?i)S Attack" | #"(?i)Security A\S*")> (<SPACE>? value)?
alliance = <#"(?i)Alliance">
armor-purge = <#"(?i)Armor Purge">
barrier = <#"(?i)Barrier">
blast-digivolve = <#"(?i)Blast Digivolve">
blitz = <#"(?i)Blitz">
de-digivolve = <#"(?i)De\-Digivolve"> (<SPACE>? value)?
decoy = <#"(?i)Decoy"> <SPACE>? <"("> (color <"/"> color) <"trait">? <")"> (* TODO: Decoy traits and "or" support *)
delay = <#"(?i)Delay">
digi-burst = <#"(?i)Digi\-Burst"> (<SPACE>? value)?
digisorption = <#"(?i)Digisorption"> (<SPACE>? value)?
evade = <#"(?i)Evade">
fortitude = <#"(?i)Fortitude">
jamming = <#"(?i)Jamming">
material-save = <#"(?i)Material Save"> <SPACE>? value
mind-link = <#"(?i)Mind Link">
overflow = <#"(?i)Overflow"> <SPACE>? <"("> value <")">
piercing = <#"(?i)Piercing">
raid = <#"(?i)Raid">
reboot = <#"(?i)Reboot">
save = <#"(?i)Save">
retaliation = <#"(?i)Retaliation">
recovery = <#"(?i)Recovery"> (<SPACE>? value)? <SPACE>? <"(Deck)">

keyword-effect_dna-digivolve = <#"[\<＜]"> <"DNA Digivolution:" SPACE> value <SPACE "from" SPACE> dna-digivolve-requirement <" + "> dna-digivolve-requirement <#"[\>＞]"> <SPACE "Digivolve unsuspended with the 2 specified Digimon stacked on top of each other.">?
dna-digivolve-requirement = color <SPACE> level


(* GAIN/LOSE *)
gain_lose =
    <#"(?i)then\,?">?
    (
        conditional
        | duration
        | choose
    )?
    (lose | gain)+
    (<SPACE> conditional)?
    (<SPACE> duration)?
    (<("."? SPACE)>? PARENTHESES)?
lose =
    <#",?( and )?">?
    <SPACE>?
    (target+ <SPACE>)?
    <(#"(?i)(loses?|decreasing your)") SPACE>
    (
          DP
        | keyword-effect
        | memory
    )+
gain =
    <#",?( and )?">?
    <SPACE>?
    (target+ <SPACE>)?
    <(#"(?i)gets?" | #"(?i)gains?") SPACE>
    (
          DP
        | keyword-effect
        | memory
        | '"' CARD_RULE '"'
    )+
DP = (<"whose total" SPACE> | <("with" | "dropping to") SPACE>? value <SPACE>)? <"DP"> (<SPACE> sum)? (<SPACE> (LTE | GTE))?
sum = (<"adds up to "> value) | (<"for each of its "> field)
level = <(("a" | "is") SPACE)? (#"[Ll][Vv]\." | #"(?i)level\s+")> (<SPACE>? <"of">)? <SPACE>? value
memory = (value <SPACE>)? <"memory"> (<SPACE "by" SPACE> value)?
play-cost = (value <SPACE>)? <((("with" | "for") SPACE)? "a" SPACE)? (("play" | "memory") SPACE)? "cost"> (<SPACE> <"of">)? <SPACE>? value
reduce-play-cost-by = <"reduce its play cost by "> value
reduce-digivolution-cost-by =
    (before <SPACE>)?
    (
        <"reduce the memory cost of the digivolution by ">
        |
        <"reduce the digivolution cost by ">
    )
    value


(* DURATION *)
duration = current-turn | end-of-turn | end-of-your-next-turn | end-of-opponents-next-turn | end-of-battle | opponents-next-unsuspend-phase
current-turn = <("for the turn" | "this turn")>
end-of-turn = <#"(?i)At end of turn">
end-of-your-next-turn = <#"(?i)until the end of your next turn">
end-of-opponents-next-turn = <#"(?i)until the end of (your opponent\'s|their) next turn">
end-of-battle = <"At the "? #"end of( the)? battle" ","?>
opponents-next-unsuspend-phase = <"during its owner's next unsuspend phase">


(* PLAY *)
play =
    ((conditional | choose) <",">? <SPACE>)?
    (duration <SPACE>)?
    ((optional | before) <SPACE>)?
    <#"(?i)(play|use)" SPACE>
    target
    (<SPACE> using-effect <",">?)?
    (
        <SPACE>
        (<"as another Digimon"> | play-from | from-trash | from-digivolution-cards | keyword-effect)
    )?
    (<"," SPACE> conditional)?
    (
        (<SPACE> (no-memory-cost | reduce-play-cost-by | no-color-requirement))
        |
        (<"," SPACE> trash_delete)
        |
        (<"," SPACE> gain_lose)
    )?
using-effect = <("using" | "by") " an effect">
play-from = (or | zone) | (from-trash | from-digivolution-cards)
no-memory-cost = <#"without paying (its|their|the)( memory)? costs?">
no-color-requirement = <#"without meeting (its|their) color requirements?">
from-digivolution-cards = <"from this Digimon's digivolution cards">


(* TRASH *)
<trash_delete> = trash-to-security-attack / (trash | trash-to-trash | trash-to-reveal | trash-to-keyword | deletes-in-battle)
trash =
    (
        ((conditional | choose | if-you-do) <",">? <SPACE>)? <#"(?i)(deletes?|trash(es|ing)?)"> <SPACE> target? (<SPACE> choose)? (<SPACE> conditional)?
        |
        (<#"(?i)Then\,?"> <SPACE>)? <#"(?i)(deletes?|trash(es|ing)?)"> <SPACE> (zone | remaining_cards) <"." SPACE?>
        |
        ((conditional | choose | if-you-do) <",">? <SPACE>)? <#"(?i)(deletes?|trash(es|ing)?)"> <SPACE> <"them">
    )
from-trash = <#"from (your\s)?(trash|recycle bin)">
trash-to-trash = (conditional <",">? <SPACE>)? (optional <SPACE>)? <#"(?i)(deletes?|trash(es|ing)?)"> <SPACE> target (<SPACE "to" SPACE> trash_delete)
trash-to-reveal = (conditional <",">? <SPACE>)? (optional <SPACE>)? <#"(?i)(deletes?|trash(es|ing)?)"> <SPACE> target (<SPACE "to" SPACE> reveal)
trash-to-keyword = (optional <SPACE>)? <#"(?i)(deletes?|trash(es|ing)?)"> <SPACE> target? <"," SPACE> keyword-effect
trash-to-security-attack = (conditional <",">? <SPACE>)? <#"(?i)(trash(es|ing)?)" SPACE> zone
deletes-in-battle = (conditional <",">? <SPACE>)? <#"(?i)(deletes?|trash(es|ing)?)" SPACE> target <SPACE in-battle SPACE> survives? (<"," SPACE> trash-to-security-attack)?


(* ACTIVATE *)
activate = <#"(?i)activate"> <SPACE> target <SPACE> timing <(" effect")>


(* SUSPEND/UNSUSPEND *)
<suspend_unsuspend> = suspend | suspend_or | unsuspend | suspend-to-unsuspend | suspend-to-return | suspend-and-disallow-unsuspend
suspend = (conditional <",">? <SPACE>)? (optional <SPACE>)? <#"(?i)suspend"> <SPACE> target ((<SPACE "to" SPACE> gain_lose) | add)?
suspend_or = <#"(?i)suspend "> target <", or "> target
unsuspend = (conditional <",">? <SPACE>)? (optional <SPACE>)? <#"(?i)unsuspend"> <SPACE> target (<SPACE "by" SPACE> (gain_lose | trash_delete))?
suspend-to-unsuspend = (conditional <",">? <SPACE>)? (optional <SPACE>)? <#"(?i)suspend"> <SPACE> target (<SPACE "to" SPACE>? unsuspend)
suspend-to-return = (conditional <",">? <SPACE>)? (optional <SPACE>)? <#"(?i)suspend"> <SPACE> target (<SPACE "to" SPACE>? return)
suspend-and-disallow-unsuspend = <#"(?i)suspend"> <SPACE> target <"."> <SPACE> conditional <SPACE> target <SPACE "doesn't unsuspend"> <SPACE> duration


(* RETURN *)
return = <("."? SPACE? (#"(?i)then\,?" | ",") SPACE)>? (conditional <",">? <SPACE>)? (optional <SPACE>)? <#"(?i)return"> <SPACE> target <SPACE>? (from-trash <SPACE>)? zone <"." SPACE PARENTHESES>? trash_delete?


(* ADD TO HAND *)
add = 
    (
        <("."? SPACE? (#"(?i)then\,?" | ",") SPACE) | ", and ">?
        <#"(?i)add"> <SPACE>
        ((target <SPACE>) / (target <SPACE>)+)
        <"among them" SPACE>? <"to" SPACE>?
        zone
        <("." SPACE PARENTHESES)>?
    )


(* TRIGGER *)
trigger = (conditional <",">? <SPACE>)? <#"(?i)trigger"> <SPACE> keyword-effect (<SPACE> <"on"> <SPACE> target)? (<".">?<SPACE> PARENTHESES)?


(* REVEAL *)
reveal =
    <#"(?i)reveal" SPACE> zone <"." SPACE?>
    (
        (conditional <SPACE>)? add <"." SPACE?>
        (otherwise | place)
    )?


(* OTHERWISE *)
otherwise = <SPACE? "Otherwise," SPACE> place


(* PLACE *)
place = <#"(?i)then\,?" SPACE>? (optional <SPACE>)? <("."? SPACE)>? <#"(?i)plac(e|ing)"> <SPACE> target <SPACE> zone (<SPACE> order)?
order = order_any
order_any = <"in any order">


(* LIST ITEM *)
li = <("・" | "*")> S


(* SEARCH *)
search =
    (conditional <",">? <SPACE>)?
    (optional <SPACE>)?
    <#"(?i)search">
    <SPACE> zone <SPACE "for" SPACE> target
    <" and ">
    play


(* SHUFFLE *)
shuffle =
    <#"(?i)then\,?" SPACE>?
    <#"(?i)shuffle">
    <SPACE> zone


(* ALSO TREAT AS *)
also-treat-as = <"Also treat as" SPACE> (treat-as-name | treat-as-traits)+
treat-as-name = <(SPACE "and" | "if") SPACE "name is" SPACE> mention
treat-as-traits = <(SPACE "and" SPACE)? "traits include" SPACE> mention


(* ATTACK *)
attack = target <SPACE> (optional <SPACE>)? <#"(?i)attacks?"> <SPACE> target (<SPACE> duration)?


(* TARGET *)
target = and / or / and_or / (itself | that | (your-opponent / your) | owner | player | players | remaining_cards | effect | security-stack | zone | number-of-cards | digivolution_cards) / mention / before / card_type / target_field
itself = <("it"|#"(?i)This") SPACE> card_type
that = (<"of" SPACE>? <#"(?i)(That) (Digimon|card(\'s)?)"> | <"it"> | <"the played Digimon's">)
your =
    (
        (value <SPACE>)?
        <"of" SPACE>?
        <(#"you(\'ve)?" | "your")>
        <(SPACE "other")>?
        <(SPACE "have")>?
        (
            <SPACE>
            (value <SPACE>)?
            (number-of-cards | state | level)
        )?
        (<SPACE> card_type (<SPACE> state)?)?
        (<SPACE> and)?
        (<SPACE> (keyword-effect | DP))?
    )
your-opponent =
    (
        (value <SPACE>)?
        <"of" SPACE>?
        (state <SPACE>)?
        <#"(?i)(your |an )?opponent(\'s)?">
        <(SPACE ("have" | #"has( a)?"))>?
        (
            <SPACE>
            (value <SPACE>)?
            (number-of-cards | state | level)
        )?
        (<SPACE> card_type (<SPACE> state)?)?
        (<SPACE> and)?
        (<SPACE> (keyword-effect | DP))?
    )
owner = <"its owner's">
player = <"a" SPACE>? <#"(?i)player">
players = <"a" SPACE>? <#"(?i)players">
card_type =
    <"another" SPACE>?
    (state <SPACE>)?
    (
        (
              digi-egg_card_type
            | digimon_card_type
            | (security_digimon_card_type / security_card_type)
            | tamer_card_type
            | option_card_type
        )
        / any_card_type
    )
    (<SPACE (#"(that )?has" | "with") SPACE> (keyword-effect | digivolution_cards))?
    (<SPACE> mention)?
remaining_cards = <"the remaining cards" | "the rest">
effect = <#"(?i)This effect">
target_field = target <SPACE> <"with" SPACE>? field
field = (MAX <SPACE>)? (field_level | field_color)
field_level = <#"levels?">
field_color = <#"colors?">
by-target-effects = <"by" SPACE> target <SPACE "effects">

any_card_type =
    (
        (
            (value <SPACE>)?
            ((color | level) <SPACE>?)*
            <#"card(\'s)?">
            (<SPACE> mention)?
        )
        /
        (
            (value <SPACE>)
            ((color | level) <SPACE>?)+
        )
    )
digimon_card_type = (value <SPACE>)? ((color | level) <SPACE>)* <#"(?i)Digimon"> (<SPACE> state)? <SPACE ("that's" | "with a")>? (<SPACE> (color | level))* (<SPACE "whose" SPACE> level)? <SPACE "card">? (<SPACE> play-cost)?
security_digimon_card_type = <#"(?i)Security Digimon"> <SPACE "card">?
security_card_type = (value <SPACE>)? <#"(?i)Security cards?"> (<SPACE> (LTE | GTE))?
digi-egg_card_type = <#"(?i)Digi-Egg?"> <SPACE "card">?
tamer_card_type = (value <SPACE>)? ((color | level) <SPACE>)* <#"(?i)Tamers?"> <SPACE "card">? (<SPACE> play-cost)?
option_card_type = (value <SPACE>)? ((color | level) <SPACE>)* <#"(?i)Options?"> <SPACE "card">? (<SPACE> play-cost)?


(* ZONES *)
zone = (location <SPACE>)? (value <SPACE>)? <(#"cards?" SPACE)? ("from" | "of" | "in" | "to") SPACE>? (location <SPACE>)? (your | your-opponent | owner) <SPACE> (zone_or / zones)
<zones> = (zone_deck | zone_hand | zone_trash | zone_security | zone_battle-area)
zone_or = zones <" or "> zones
zone_deck = (value <SPACE>)? <"cards in" SPACE>? (target <SPACE>)? <"deck">
zone_hand = (value <SPACE>)? <"cards in" SPACE>? (target <SPACE>)? <"hand">
zone_trash = (value <SPACE>)? <"cards in" SPACE>? (target <SPACE>)? <("trash" | "recycle bin")>
zone_security = (value <SPACE>)? <"cards in" SPACE>? (target <SPACE>)? <"security" (SPACE "stack")?> <SPACE "face down">?
zone_battle-area = (value <SPACE>)? <"cards in" SPACE>? (target <SPACE>)? <#"(?i)battle area">
number-of-cards = <"the number of cards in"> <SPACE> zone (<SPACE> (LTE | GTE))?


(* CHOOSE *)
choose = (<#"(?i)Choose"> <SPACE>) target conditional? (<(SPACE "and" | "." SPACE)> <SPACE>?)?
disable =
    target <SPACE>
    (digivolution_cards <SPACE>)?
    <"can't" (SPACE "be")?>
    (<SPACE> state)?
    <SPACE "or">?
    (<SPACE> by-target-effects)?
    (<SPACE> state)?
    (<SPACE> duration)?

in-battle = <"in battle">

(* SECURTIY STACK *)
(* NOTE: Attacking a player is also the same as attacking security *)
security-stack = value <SPACE> location <SPACE> <"of" SPACE> target <SPACE> <"security stack">

<disallow> = disallow-attack | disallow-block | disallow-attack-and-block | disallow-reduce-play-cost | disallow-activation
disallow-attack = target <SPACE> <"can't attack"> <SPACE> target
disallow-block = target <SPACE "can't be blocked by" SPACE> target <SPACE> digivolution_cards
disallow-attack-and-block = choose? target <SPACE "can't attack or block" SPACE> (target | duration)
disallow-reduce-play-cost = target <SPACE> <"can't reduce play costs">
disallow-activation =
    (
        <#"(?i)Any"> <SPACE> timing <SPACE> <"effects on"> <SPACE> target <SPACE> <"played with this effect don't activate">
    )
    |
    (
        target <SPACE "doesn't activate"> <SPACE> timing <SPACE ("skills" | "effects") SPACE> <"on" SPACE> target <SPACE "it checks">
    )


if-you-do = <"If you do">
conditional =
    (
        (
            <#"(?i)Then\,?" SPACE>?
            <#"(?i)(when|while( there are)?|(if there are)|(if( it\'s a)?))" SPACE>
            (
                ((attack / target / dna-digivolving) <","? SPACE?>)
                /
                (
                    target <SPACE>
                    (
                          level
                        | play-cost
                        | memory
                        | keyword-effect
                    )
                    <","? SPACE?>
                )
            )
            <"," SPACE>?
        )
        |
        for-every
    )
    (<"."> <SPACE> disable)?

for-every = <#"(?i)for every"> <SPACE> digivolution_cards <SPACE "has">
digivolution_cards =
    (value (<SPACE> level)? <SPACE>)
    (card_type <SPACE>)?
    <#"(?i)digivol(ve|ving|ution) card(s)?">
    (<SPACE> location)?
    (<SPACE> target)?
    (<SPACE> in-play)?
location = (location_anywhere | location_top | location_bottom) / location_or
location_or = (location <" or "> location)
location_anywhere = <#"(placed )?under">
location_bottom = (<"face down" SPACE>? <(("at" | "to") " the" SPACE)? "bottom" (SPACE "of")?>) | <"under">
location_top = <"face down at" SPACE>? <"from "? "the" SPACE>? <"on "? "top" " of"?> <SPACE "card">?


(* STATE *)
state = ((did-not | does-not) <SPACE>)? (tense <SPACE>)? (attacks | block | blocked | blockable | unblockable | battling | digivolved | dna-digivolving | survives | deleted | suspended | unsuspended | in-play) (<SPACE> duration)?
tense = is | becomes | was
is = <"is">
was = <"was">
becomes = <"becomes">
did-not = <("didn't" | "did not")>
does-not = <("doesn't" | "does not")>


attacks = <#"attacks?"> (<SPACE> with <SPACE> card_type <SPACE> duration)?
with = <"with"> <SPACE "a">?
without = <"without"> <SPACE "a">?
block = <#"blocks?">
blocked = <"blocked">
blockable = <"blockable">
unblockable = <"unblockable">
battling = <"battling">
digivolved = <#"digivolved?">
dna-digivolving = <"DNA digivolving">
survives = <("and" SPACE)? "survives">
deleted = <"deleted"> deleted-by?
deleted-by = <SPACE "by"> <SPACE> (DP | effect)
suspended = <"suspended">
unsuspended = <"unsuspended">
in-play = <"in play">


(* DIGIVOLVE INTO *)
digivolve-into =
    (
        (
            (conditional <",">? <SPACE>)?
            (target <SPACE>)?
        )
        |
        before
    )?
    <("can" SPACE)? "digivolve into">
    <#" an?">?
    <SPACE> target <SPACE>?
    (<"in your hand"> <SPACE> play-cost)?
    <(","? SPACE)>?
    (ignore-digivolve-requirements | reduce-digivolution-cost-by)
ignore-digivolve-requirements = <"ignoring its digivolution requirements">
optionally-dna-digivolve = <"You may DNA digivolve this Digimon and one of your other Digimon in play into a Digimon card in your hand " ("for" | "by paying") " its DNA digivolve cost">


(* MENTIONS *)
<_mention_> = #"[\[][^\]]*[\]]"
mention_or = (_mention_ <","> <SPACE>)+ <SPACE? "or "> _mention_
mention = <with SPACE>? <"has">? (value <SPACE>)? (_mention_ | mention_or) (<SPACE> (in-name | in-traits))?
in-name = <"in" SPACE> <("its" | "their") SPACE>? <#"names?">
in-traits = <"in" SPACE> <("its" | "their") SPACE>? <#"traits?">
